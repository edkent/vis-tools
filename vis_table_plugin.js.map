{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/vis_primitives.js","webpack:///./node_modules/ssf/ssf.js","webpack:///./src/vis_table_plugin.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;;AAEA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,K;;AAEA;AACA;AACA;AACA;AACA,O;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,yCAAyC;AACzC;AACA,mCAAmC;AACnC;AACA,oCAAoC;AACpC;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,eAAe,0BAA0B;AACzC,WAAW,0BAA0B;;AAErC;AACA;AACA;AACA;;AAEA;AACA,eAAe,0BAA0B;AACzC,WAAW,0BAA0B;;AAErC;AACA;AACA;AACA;;AAEA;AACA,eAAe,qCAAqC;AACpD,WAAW,0BAA0B;;AAErC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,wEAAwE,gCAAgC,gBAAgB,EAAE,IAAI,gEAAgE;AAC7M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;;AAER;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA,0BAA0B;AAC1B,0CAA0C;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,2BAA2B;AAC1C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,eAAe,iCAAiC;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,eAAe,6BAA6B;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,sIAAsI,KAAK;AAC1J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjYA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qBAAqB,4BAA4B,gCAAgC,UAAU;AAC3F,oBAAoB,YAAY,0BAA0B,UAAU;AACpE,mBAAmB,WAAW;AAC9B,mBAAmB,WAAW;AAC9B,oBAAoB,WAAW;AAC/B,qBAAqB,uBAAuB;AAC5C,qBAAqB,WAAW;AAChC;AACA,oBAAoB,yCAAyC,uBAAuB,oBAAoB;AACxG,0BAA0B,YAAY,qQAAqQ;AAC3S;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,gBAAgB;AAChB,kBAAkB;AAClB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,YAAY;AACZ;AACA,YAAY,cAAc,SAAS,SAAS,EAAE,OAAO,SAAS,SAAS,EAAE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB,QAAQ,SAAS;AAC1D;AACA,kBAAkB,uCAAuC;AACzD,sBAAsB,qCAAqC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC,mBAAmB;AACnB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uBAAuB;AACpD;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,UAAU;AAC3C,4BAA4B,UAAU;AACtC,GAAG;AACH;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA,GAAG;AACH;AACA;AACA,yCAAyC,mBAAmB;AAC5D;AACA,GAAG;AACH;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA,GAAG;AACH;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,4DAA4D;AAC5D,yFAAyF;AACzF;AACA,GAAG,iCAAiC;AACpC;AACA,WAAW;AACX;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,aAAa;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,8EAA8E,EAAE;AAClJ,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA,mBAAmB;AACnB,mBAAmB;AACnB;AACA;AACA;AACA;AACA,sBAAsB,yBAAyB,qCAAqC;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sFAAsF,2BAA2B;AACpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,wIAAwI,2DAA2D,EAAE;AACrM;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,IAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,kDAAkD;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,EAAE,wCAAwC,gEAAgE,EAAE;AACzM;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,8EAA8E,EAAE;AAClJ,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,EAAE;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,IAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,kDAAkD;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,EAAE,wCAAwC,gEAAgE,EAAE;AACvM;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC;AACA,oBAAoB;AACpB;AACA,OAAO;AACP,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,KAAK;AAC9C,kBAAkB,sDAAsD,EAAE,UAAU,KAAK;AACzF,mBAAmB;AACnB,kBAAkB;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sJAAsJ;AACtJ;AACA,0CAA0C,YAAY;AACtD,iBAAiB,sDAAsD;AACvE,2BAA2B;AAC3B;AACA,wEAAwE,YAAY;AACpF,iBAAiB;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB,MAAM;AACjD;AACA,aAAa,kDAAkD;AAC/D,uBAAuB,YAAY,KAAK;AACxC;AACA,uBAAuB,UAAU,KAAK;AACtC,gCAAgC,cAAc,MAAM;AACpD;AACA,uBAAuB,YAAY,KAAK;AACxC;AACA;AACA,mBAAmB,sDAAsD,wBAAwB;AACjG,wBAAwB,0BAA0B,SAAS,MAAM;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6BAA6B,wBAAwB;AACvE,UAAU;AACV;AACA;AACA,uBAAuB,UAAU,SAAS;AAC1C;AACA,WAAW;AACX;AACA,kDAAkD,2CAA2C,WAAW,QAAQ;AAChH,wDAAwD,6CAA6C,WAAW,MAAM,QAAQ;AAC9H,UAAU,WAAW,KAAK;AAC1B;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B,wBAAwB;AACxE,wBAAwB;AACxB;AACA,KAAK;AACL;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,wBAAwB,YAAY;AACpC;AACA;AACA;AACA,UAAU;AACV,uBAAuB,YAAY;AACnC;AACA,UAAU;AACV,uBAAuB,UAAU,SAAS;AAC1C,iBAAiB,sDAAsD,OAAO;AAC9E,0CAA0C,yBAAyB,KAAK;AACxE;AACA,UAAU;AACV,uBAAuB,YAAY;AACnC,gCAAgC,UAAU,KAAK;AAC/C,gCAAgC,cAAc,KAAK;AACnD;AACA,uBAAuB;AACvB,uBAAuB,YAAY,KAAK;AACxC;AACA;AACA;AACA,6BAA6B,QAAQ;AACrC;AACA,qCAAqC,SAAS,mBAAmB;AACjE;AACA;AACA;AACA;AACA,wDAAwD;AACxD,8BAA8B,gBAAgB,mBAAmB,EAAE;AACnE,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,UAAU,QAAQ;AACnC,oBAAoB,UAAU,QAAQ;AACtC,oBAAoB,UAAU,QAAQ;AACtC;AACA;AACA,iBAAiB,UAAU,QAAQ;AACnC,oBAAoB,UAAU,QAAQ;AACtC;AACA;AACA;AACA;AACA,SAAS,gBAAgB;AACzB;AACA;AACA,2BAA2B,cAAc,EAAE;AAC3C;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU,GAAG;AAC7B;AACA;AACA,aAAa;AACb,4BAA4B,gCAAgC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,gBAAgB,2EAA2E,WAAW,OAAO;AACvH;AACA;AACA,sBAAsB,OAAO;AAC7B;AACA,+BAA+B,uBAAuB,+CAA+C;AACrG;AACA,UAAU,iCAAiC,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,SAAS,MAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA,SAAS,mBAAmB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,cAAc;AACvB;AACA;AACA;AACA;AACA;AACA,SAAS,kBAAkB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,yCAAyC;AACzC,yCAAyC;AACzC,yCAAyC;AACzC,yCAAyC;AACzC,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mGAAmG;AACnG,0FAA0F;AAC1F,0FAA0F;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B,+BAA+B,qBAAqB,UAAU;AAC9D,4BAA4B,SAAS,OAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,kBAAkB;AACxD;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,KAA6B;;;;;;;;ACl2BhC;AAAA;AAAA;AAAA;AAAA;AAAqB;;AAEmH;;AAExI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,+BAA+B;AACtC,OAAO,qBAAqB;AAC5B,OAAO,iCAAiC;AACxC,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,kBAAkB;AACzB,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,qBAAqB;AAC5B,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,EAAE;AACf,aAAa,EAAE;AACf,aAAa,EAAE;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,MAAK;AACzB,oBAAoB,MAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B,4BAA4B;;AAE5B;AACA;;AAEA,yBAAyB;AACzB,wBAAwB;AACxB,+BAA+B;AAC/B,iEAAiE;AACjE,yBAAyB;;AAEzB;AACA;AACA;AACA,wBAAwB;AACxB;;AAEA,8B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B,WAAW,yBAAyB;AACpC,WAAW,uBAAuB;AAClC,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wBAAwB;AACnC,WAAW,oBAAoB;AAC/B,WAAW,sBAAsB;AACjC,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,iCAAiC,yBAAyB;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;AACA,4BAA4B,0DAAU,EAAE,uCAAuC;AAC/E;AACA,yBAAyB,6CAA6C;AACtE,KAAK;;AAEL;AACA,UAAU,+BAA+B,oDAAoD,EAAE;AAC/F;;AAEA,yBAAyB,6BAA6B,kDAAkD,EAAE;;AAE1G;AACA;AACA,KAAK;AACL;AACA;;AAEA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,EAAE;AACf,aAAa,EAAE;AACf;AACA;AACA;AACA,6BAA6B,8DAAc;AAC3C;AACA;AACA,OAAO;AACP;AACA;;AAEA,uBAAuB,sDAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0DAAU,EAAE,mDAAmD;AAChG,iCAAiC,0DAAU,EAAE,4DAA4D;AACzG;AACA;AACA;AACA;AACA;AACA,mCAAmC,0DAAU,EAAE,4DAA4D;AAC3G;AACA;AACA,mCAAmC,0DAAU,EAAE,0DAA0D;AACzG;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,KAAK;;AAEL,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,EAAE;AACf,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA,2BAA2B,4DAAY;AACvC;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,sDAAM;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,0DAAU,E;AACnD;AACA;AACA,iCAAiC,eAAe;AAChD;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,yCAAyC,0DAAU,EAAE,sDAAsD;AAC3G;;AAEA;AACA,yCAAyC,0DAAU,EAAE,oDAAoD;AACzG;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA,yBAAyB,sDAAM;AAC/B;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qCAAqC,0DAAU,EAAE,sDAAsD;AACvG;;AAEA;AACA,qCAAqC,0DAAU,EAAE,oDAAoD;AACrG;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,uBAAuB,4DAAY;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,sDAAM;AAC/B;AACA;AACA;AACA;AACA;AACA,qCAAqC,0DAAU,EAAE,iDAAiD,YAAY,EAAE;AAChH;AACA;AACA;AACA,qCAAqC,0DAAU,EAAE,oDAAoD;AACrG;AACA;AACA,qCAAqC,0DAAU,EAAE,kDAAkD;AACnG;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sDAAM;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,0DAAU,EAAE,mDAAmD;AAC9F,+BAA+B,0DAAU,EAAE,4DAA4D;AACvG;AACA;AACA;AACA;AACA;AACA,iCAAiC,0DAAU,EAAE,yDAAyD;AACtG;AACA;AACA,iCAAiC,0DAAU,EAAE,uDAAuD;AACpG;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA,8BAA8B,mDAAG;;AAEjC;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qGAAqG,0CAAG;AACxG;AACA,W;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;AACA,oBAAoB,mDAAG;AACvB;;AAEA;AACA;AACA,uBAAuB,wDAAQ,E;AAC/B;AACA,c;AACA;AACA;AACA,2B;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iGAAiG,0CAAG;AACpG;;AAEA;AACA,gCAAgC,0DAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA,wCAAwC,wDAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP,2BAA2B,4DAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,wBAAwB,mDAAG;;AAE3B;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wCAAwC,wDAAQ,E;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;;;AAGA;AACA;AACA;;AAEA,wBAAwB,wDAAQ,E;AAChC;AACA,c;AACA;AACA;AACA;AACA;AACA;AACA,2B;AACA,SAAS;;AAET,kGAAkG;AAClG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2GAA2G,0CAAG;AAC9G;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX,S;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B,mDAAG;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,0CAAG;AACrB,0CAA0C,wDAAQ,E;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,0CAA0C,wDAAQ,E;AAClD;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,mCAAmC,SAAS;AAC5C;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,0BAA0B,mBAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mB;AACA;;AAEA;AACA;AACA;AACA,mC;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,4BAA4B,mDAAG;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,yBAAyB,wDAAQ,E;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gHAAgH;AAChH,2BAA2B,wDAAQ,E;AACnC;AACA;AACA,kBAAkB;AAClB,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA,e;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,oGAAoG,0CAAG;AACvG;AACA;AACA;AACA;AACA,a;;AAEA,2BAA2B,wDAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,KAAK;AACL;;;AAGA;AACA;AACA;AACA;AACA,mCAAmC,sDAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+C;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,0DAAU,E;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,2CAA2C,0DAAU,EAAE;AACvD;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,2CAA2C,0DAAU,EAAE,gFAAgF;AACvI;;AAEA;AACA,2CAA2C,0DAAU,EAAE,8EAA8E;AACrI;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA,SAAS;AACT,0CAA0C,wDAAQ;AAClD;AACA,gGAAgG,0CAAG;AACnG;AACA;AACA;AACA,SAAS;AACT,uD;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,aAAa,EAAE;AACf,aAAa,EAAE;AACf,aAAa,EAAE;AACf,aAAa,EAAE;AACf,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wDAAQ;AAC/B;AACA,2FAA2F,0CAAG;AAC9F;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,yBAAyB,wDAAQ;AACjC;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,yBAAyB,wDAAQ;AACjC;AACA,sBAAsB,0CAAG;AACzB;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sDAAM;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,K;;AAEA;AACA;AACA;;AAEA,oC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0DAAU,EAAE,iDAAiD,eAAe,EAAE;AAC7G;AACA;AACA;AACA,+BAA+B,0DAAU,EAAE,mEAAmE;AAC9G;AACA;AACA;AACA,+BAA+B,0DAAU,EAAE,iEAAiE;AAC5G;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,SAAS,yC;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,eAAe;AACf,aAAa;AACb,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb,W;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA;AACA,gCAAgC;AAChC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,mCAAmC,QAAQ;AAC3C;;AAEA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,0BAA0B,mBAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,SAAS,0CAA0C,EAAE;AACtE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,sDAAM;;AAEvC;AACA;AACA,6BAA6B,0DAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,sDAAM;;AAEvC;AACA;AACA;AACA,6BAA6B,0DAAU,E;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA,KAAK;AACL;;AAEA,+B;AACA;AACA;AACA;;AAEA;AACA,2C;AACA,uBAAuB,wDAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;;AAEP,+BAA+B,mDAAG;AAClC;AACA;AACA;AACA;;AAEA;;AAEA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,WAAW;AACX;AACA,8CAA8C;AAC9C,WAAW;AACX;AACA;AACA,W;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA,wB;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,4B;AACA;AACA;AACA,KAAK;AACL;AACA;;;AAGA;AACA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,qB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,EAAE;AACf,aAAa,EAAE;AACf,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,S;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,+BAA+B;AAC5D,SAAS;AACT,+BAA+B,kCAAkC;AACjE,SAAS;AACT,6BAA6B,kCAAkC;AAC/D;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,6BAA6B,+BAA+B;AAC5D,SAAS;AACT,+BAA+B,kCAAkC;AACjE,SAAS;AACT,6BAA6B,kCAAkC;AAC/D;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,wB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA","file":"vis_table_plugin.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\n * Returns an array of given length, all populated with same value\n * Convenience function e.g. to initialise arrays of zeroes or nulls\n * @param {*} length \n * @param {*} value \n */\nconst newArray = function(length, value) {\n  var arr = []\n  for (var l = 0; l < length; l++) {\n    arr.push(value)\n  }\n  return arr\n}\n\nclass ModelField {\n  constructor({ vis, queryResponseField }) {\n    this.vis = vis\n    this.name = queryResponseField.name\n    this.view = queryResponseField.view_label || ''\n    this.label = queryResponseField.field_group_variant || queryResponseField.label_short || queryResponseField.label\n    this.is_numeric = typeof queryResponseField.is_numeric !== 'undefined' ? queryResponseField.is_numeric : false\n    this.is_array = ['list', 'number_list', 'location', 'tier'].includes(queryResponseField.type)\n    this.value_format = queryResponseField.value_format ? queryResponseField.value_format : ''\n\n    this.geo_type = ''\n    if (queryResponseField.type === 'location' || queryResponseField.map_layer) {\n      this.geo_type = queryResponseField.type === 'location' ? 'location' : queryResponseField.map_layer.name\n    } \n\n    this.hide = false\n    if (typeof this.vis.config['hide|' + this.name] !== 'undefined') {\n      if (this.vis.config['hide|' + this.name]) {\n        this.hide = true\n      } \n    }\n\n    this.style = ''\n    var style_setting = this.vis.config['style|' + this.name]\n    if (typeof style_setting !== 'undefined') {\n      if (style_setting === 'hide') {\n        this.hide = true\n      } else {\n        this.style = style_setting\n      }\n    }\n\n    this.heading = ''\n    this.short_name = ''\n    this.unit = ''\n    if (typeof queryResponseField.tags !== 'undefined') {\n      queryResponseField.tags.forEach(tag => {\n        var tags = tag.split(':')\n        if (tags[0] === 'vis-tools') {\n          switch (tags[1]) {\n            case 'heading':\n              this.heading = tags[2] ; break\n            case 'short_name':\n              this.short_name = tags[2] ; break\n            case 'unit':\n              this.unit = tags[2] ; break\n            case 'style':\n              this.style = tags[2] ; break\n          }\n        }\n      })\n    }\n  }\n}\n\nclass ModelDimension extends ModelField {\n  constructor({ vis, queryResponseField }) {\n    super({ vis, queryResponseField })\n\n    this.type = 'dimension'    \n    this.align = 'left'\n  }\n}\n\nclass ModelPivot extends ModelField {\n  constructor({ vis, queryResponseField }) {\n    super({ vis, queryResponseField })\n\n    this.type = 'pivot'    \n    this.align = 'center'\n  }\n}\n\nclass ModelMeasure extends ModelField {\n  constructor({ vis, queryResponseField, can_pivot }) {\n    super({ vis, queryResponseField })\n\n    this.type = 'measure'\n    this.align = 'right'\n\n    this.is_table_calculation = typeof queryResponseField.is_table_calculation !== 'undefined' ? queryResponseField.is_table_calculation : false\n    this.calculation_type = queryResponseField.type\n    this.is_turtle = typeof queryResponseField.is_turtle !== 'undefined' ? queryResponseField.is_turtle : false\n    this.can_pivot = can_pivot\n  }\n}\n\nclass HeaderCell {\n  constructor({ column, type, label = null, align = '', cell_style = [], modelField = { name: '', label: '', view: '' }, pivotData = {} } = { column, type, label, align, cell_style, modelField, pivotData }) {\n    this.id = [column.id, type].join('.')\n    this.column = column\n    this.type = type\n    this.colspan = 1\n    this.rowspan = 1\n    this.headerRow = true\n    this.cell_style = ['headerCell'].concat(cell_style)\n    this.label = label\n\n    this.align = align ? align : this.column.modelField.is_numeric ? 'right' : 'left'\n\n    // if (column.vis.sortColsBy === 'pivots') {\n    //   if (type.startsWith 'pivot') {\n    //     this.align = 'center'\n    //   }\n    // } else {\n\n    // }\n\n    // if (this.column.modelField.type === 'dimension') {\n    //   if (type === 'pivot') {\n    //     this.align = 'right'\n    //   } else if (type === 'heading') {\n    //     this.align = 'center'\n    //   } else {\n    //     this.align = modelField.align || 'left'\n    //   }\n    // } else if (this.column.modelField.type === 'measure') {\n    //   if (type === 'field' && (column.vis.pivot_fields.length === 0 || column.vis.sortColsBy === 'getSortByPivots' )) {\n    //     this.align = modelField.align || 'right'\n    //   } else {\n    //     this.align = 'center'\n    //   }\n    // } else {\n    //   this.align = align\n    // }\n\n    this.modelField = modelField\n    this.pivotData = pivotData\n\n    if (modelField.type) { this.cell_style.push(modelField.type)}\n    if (modelField.is_table_calculation) { this.cell_style.push('calculation')}\n  }\n}\n\n/**\n * types: dimension | line_item | subtotal | total\n */\nclass Series {\n  constructor({ keys, values, types = [] }) {\n    if (keys.length === values.length ) {\n      this.keys = keys\n      this.values = values\n      this.types = types\n\n      var line_items_only = []\n      var with_subtotals = []\n\n      this.values.forEach((value, i) => {\n        this.types[i] = typeof types[i] !== 'undefined' ? types[i] : 'line_item'\n        if (this.types[i] === 'line_item') {\n          line_items_only.push(value)\n          with_subtotals.push(value)\n        } else if (this.types[i] === 'subtotal') {\n          with_subtotals.push(value)\n        }\n      })\n\n      this.min_for_display = Math.min(...with_subtotals)\n      this.max_for_display = Math.max(...with_subtotals)\n      this.min = Math.min(...line_items_only)\n      this.max = Math.max(...line_items_only)\n      this.sum = line_items_only.reduce((a, b) => a + b, 0)\n      this.count = line_items_only.length\n      this.avg = line_items_only.length > 0 ? this.sum / line_items_only.length : null\n    } else {\n      console.log('Could not construct series, arrays were of different length.')\n    }\n  }\n}\n\nclass CellSeries {\n  constructor({ column, row, sort_value, series}) {\n    this.column = column\n    this.row = row\n    this.sort_value = sort_value\n    this.series = new Series(series)\n  }\n\n  toString() {\n    var rendered = ''\n    this.series.keys.forEach((key, i) => {\n      rendered += key + ':'\n      var formatted_value = this.column.modelField.value_format === '' \n                            ? this.series.values[i].toString() \n                            : SSF.format(this.column.modelField.value_format, this.series.values[i])\n      rendered += formatted_value + ' '\n    })\n    return rendered\n  }\n}\n\nclass ColumnSeries {\n  constructor({ column, is_numeric, series }) {\n    this.column = column\n    this.is_numeric = is_numeric\n    this.series = new Series(series)\n  }\n}\n\nclass DataCell {\n  constructor({ value, rendered = null, html = null, links = [], cell_style = [], align = 'right', rowspan = 1, colspan = 1, rowid = '', colid = '' } = {})\n    {\n      this.value = value\n      this.rendered = rendered\n      this.html = html\n      this.links = links\n      this.cell_style = ['rowCell'].concat(cell_style)\n      this.align = align\n      this.rowspan = rowspan\n      this.colspan = colspan\n\n      this.colid = colid\n      this.rowid = rowid\n      this.id = colid && rowid ? [colid, rowid].join('.') : null\n\n      if (this.value === null && this.rendered !== '∞') {\n        this.rendered = '∅'\n      }\n    }\n}\n\n/**\n * Represents a row in the dataset that populates the vis.\n * This may be an addtional row (e.g. subtotal) not in the original query\n * @class\n */\nclass Row {\n  constructor(type = 'line_item') {\n    this.id = ''\n    // this.modelField = null\n    this.hide = false\n    this.type = type  // line_item | subtotal | total\n    this.sort = []    // [ section, subtotal group, row number ]\n    this.data = {}    // Indexed by Column.id\n                      // { value: any, rendered: string, html?: string, links?: array }\n  }\n}\n\n/**\n * Represents a column in the dataset that populates the vis.\n * This may be an additional columns (e.g. subtotal, variance) not in the original query\n * \n * Ensures all key vis properties (e.g. 'label') are consistent across different field types\n * \n * @class\n */\nclass Column {\n  constructor(id, vis, modelField) {\n    this.id = id\n    this.vis = vis\n    this.modelField = modelField\n    this.transposed = false\n\n    this.idx = 0\n    this.pos = 0\n    this.levels = []\n    this.pivot_key = '' \n\n    this.unit = modelField.unit || ''\n    this.hide = modelField.hide || false\n    this.isVariance = false\n    this.variance_type = null\n    this.pivoted = false\n    this.isRowTotal = false\n    this.super = false\n    this.subtotal = false\n    this.subtotal_data = {}\n    \n    this.series = null\n\n    this.sort = []\n    this.colspans = []\n  }\n\n  /**\n   * Returns a header label for a column, to display in table vis\n   * @param {*} level\n   */\n  getHeaderCellLabel (level) {\n    var headerCell = this.levels[level]\n\n    if (headerCell.label !== null) {\n      var label = headerCell.label\n    } else {\n      var label = headerCell.modelField.label\n      var header_setting = this.vis.config['heading|' + headerCell.modelField.name]\n      var label_setting = this.vis.config['label|' + headerCell.modelField.name]\n\n      if (headerCell.type === 'heading') {\n        if (typeof header_setting !== 'undefined') {\n          label = header_setting ? header_setting : headerCell.modelField.heading\n        } else {\n          label = headerCell.modelField.heading\n        }\n        return label\n      }\n\n      if (headerCell.type === 'field') {\n        label = this.vis.useShortName\n          ? headerCell.modelField.short_name || headerCell.modelField.label \n          : headerCell.modelField.label\n        \n        if (typeof label_setting !== 'undefined' && label_setting !== this.modelField.label) {\n          label = label_setting ? label_setting : label\n        }\n\n        if (this.isVariance) {\n          if (this.vis.groupVarianceColumns) {\n            if (this.vis.pivot_values.length === 2) {\n              label = this.variance_type === 'absolute' ? label + ' #' : label + ' %'\n            } else {\n              label = this.variance_type === 'absolute' ? label + ' Var #' : label + ' Var %'\n            }\n          } else {\n            label = this.variance_type === 'absolute' ? 'Var #' : 'Var %'\n          }\n        }\n    \n        if (typeof this.vis.useViewName !== 'undefined' && this.vis.useViewName) {\n          label = [this.modelField.view, label].join(' ') \n        }\n      }\n\n      if (headerCell.type === 'pivot') {\n        if (this.isVariance && this.vis.groupVarianceColumns) {\n          if (this.vis.pivot_values.length === 2) {\n            label = 'Variance'\n          } else {\n            label = 'Var ' + label\n          }\n        }\n      }\n    }\n\n    return label\n  }\n\n  getHeaderCellLabelByType (type) {\n    for (var i = 0; i < this.vis.headers.length; i++) {\n      if (type === this.vis.headers[i].type) {\n        return this.getHeaderCellLabel(i)\n      }\n    }\n    return null\n  }\n\n  setHeaderCellLabels () {\n    this.levels.forEach((level, i) => {\n      level.label = level.label === null ? this.getHeaderCellLabel(i) : level.label\n    })\n  }\n\n  getHeaderData () {\n    var headerData = {}\n    this.modelField.vis.headers.forEach((header, i) => {\n      headerData[header.type] = this.levels[i]\n    })\n\n    return headerData\n  }\n}\n\nexports.newArray = newArray\nexports.ModelDimension = ModelDimension\nexports.ModelPivot = ModelPivot\nexports.ModelMeasure = ModelMeasure\nexports.CellSeries = CellSeries\nexports.ColumnSeries = ColumnSeries\nexports.HeaderCell = HeaderCell\nexports.DataCell = DataCell\nexports.Row = Row\nexports.Column = Column\n","/* ssf.js (C) 2013-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*jshint -W041 */\nvar SSF = ({});\nvar make_ssf = function make_ssf(SSF){\nSSF.version = '0.11.0';\nfunction _strrev(x) { var o = \"\", i = x.length-1; while(i>=0) o += x.charAt(i--); return o; }\nfunction fill(c,l) { var o = \"\"; while(o.length < l) o+=c; return o; }\nfunction pad0(v,d){var t=\"\"+v; return t.length>=d?t:fill('0',d-t.length)+t;}\nfunction pad_(v,d){var t=\"\"+v;return t.length>=d?t:fill(' ',d-t.length)+t;}\nfunction rpad_(v,d){var t=\"\"+v; return t.length>=d?t:t+fill(' ',d-t.length);}\nfunction pad0r1(v,d){var t=\"\"+Math.round(v); return t.length>=d?t:fill('0',d-t.length)+t;}\nfunction pad0r2(v,d){var t=\"\"+v; return t.length>=d?t:fill('0',d-t.length)+t;}\nvar p2_32 = Math.pow(2,32);\nfunction pad0r(v,d){if(v>p2_32||v<-p2_32) return pad0r1(v,d); var i = Math.round(v); return pad0r2(i,d); }\nfunction isgeneral(s, i) { i = i || 0; return s.length >= 7 + i && (s.charCodeAt(i)|32) === 103 && (s.charCodeAt(i+1)|32) === 101 && (s.charCodeAt(i+2)|32) === 110 && (s.charCodeAt(i+3)|32) === 101 && (s.charCodeAt(i+4)|32) === 114 && (s.charCodeAt(i+5)|32) === 97 && (s.charCodeAt(i+6)|32) === 108; }\nvar days = [\n\t['Sun', 'Sunday'],\n\t['Mon', 'Monday'],\n\t['Tue', 'Tuesday'],\n\t['Wed', 'Wednesday'],\n\t['Thu', 'Thursday'],\n\t['Fri', 'Friday'],\n\t['Sat', 'Saturday']\n];\nvar months = [\n\t['J', 'Jan', 'January'],\n\t['F', 'Feb', 'February'],\n\t['M', 'Mar', 'March'],\n\t['A', 'Apr', 'April'],\n\t['M', 'May', 'May'],\n\t['J', 'Jun', 'June'],\n\t['J', 'Jul', 'July'],\n\t['A', 'Aug', 'August'],\n\t['S', 'Sep', 'September'],\n\t['O', 'Oct', 'October'],\n\t['N', 'Nov', 'November'],\n\t['D', 'Dec', 'December']\n];\nfunction init_table(t) {\n\tt[0]=  'General';\n\tt[1]=  '0';\n\tt[2]=  '0.00';\n\tt[3]=  '#,##0';\n\tt[4]=  '#,##0.00';\n\tt[9]=  '0%';\n\tt[10]= '0.00%';\n\tt[11]= '0.00E+00';\n\tt[12]= '# ?/?';\n\tt[13]= '# ??/??';\n\tt[14]= 'm/d/yy';\n\tt[15]= 'd-mmm-yy';\n\tt[16]= 'd-mmm';\n\tt[17]= 'mmm-yy';\n\tt[18]= 'h:mm AM/PM';\n\tt[19]= 'h:mm:ss AM/PM';\n\tt[20]= 'h:mm';\n\tt[21]= 'h:mm:ss';\n\tt[22]= 'm/d/yy h:mm';\n\tt[37]= '#,##0 ;(#,##0)';\n\tt[38]= '#,##0 ;[Red](#,##0)';\n\tt[39]= '#,##0.00;(#,##0.00)';\n\tt[40]= '#,##0.00;[Red](#,##0.00)';\n\tt[45]= 'mm:ss';\n\tt[46]= '[h]:mm:ss';\n\tt[47]= 'mmss.0';\n\tt[48]= '##0.0E+0';\n\tt[49]= '@';\n\tt[56]= '\"上午/下午 \"hh\"時\"mm\"分\"ss\"秒 \"';\n\tt[65535]= 'General';\n}\n\nvar table_fmt = {};\ninit_table(table_fmt);\nfunction frac(x, D, mixed) {\n\tvar sgn = x < 0 ? -1 : 1;\n\tvar B = x * sgn;\n\tvar P_2 = 0, P_1 = 1, P = 0;\n\tvar Q_2 = 1, Q_1 = 0, Q = 0;\n\tvar A = Math.floor(B);\n\twhile(Q_1 < D) {\n\t\tA = Math.floor(B);\n\t\tP = A * P_1 + P_2;\n\t\tQ = A * Q_1 + Q_2;\n\t\tif((B - A) < 0.00000005) break;\n\t\tB = 1 / (B - A);\n\t\tP_2 = P_1; P_1 = P;\n\t\tQ_2 = Q_1; Q_1 = Q;\n\t}\n\tif(Q > D) { if(Q_1 > D) { Q = Q_2; P = P_2; } else { Q = Q_1; P = P_1; } }\n\tif(!mixed) return [0, sgn * P, Q];\n\tvar q = Math.floor(sgn * P/Q);\n\treturn [q, sgn*P - q*Q, Q];\n}\nfunction parse_date_code(v,opts,b2) {\n\tif(v > 2958465 || v < 0) return null;\n\tvar date = (v|0), time = Math.floor(86400 * (v - date)), dow=0;\n\tvar dout=[];\n\tvar out={D:date, T:time, u:86400*(v-date)-time,y:0,m:0,d:0,H:0,M:0,S:0,q:0};\n\tif(Math.abs(out.u) < 1e-6) out.u = 0;\n\tif(opts && opts.date1904) date += 1462;\n\tif(out.u > 0.9999) {\n\t\tout.u = 0;\n\t\tif(++time == 86400) { out.T = time = 0; ++date; ++out.D; }\n\t}\n\tif(date === 60) {dout = b2 ? [1317,10,29] : [1900,2,29]; dow=3;}\n\telse if(date === 0) {dout = b2 ? [1317,8,29] : [1900,1,0]; dow=6;}\n\telse {\n\t\tif(date > 60) --date;\n\t\t/* 1 = Jan 1 1900 in Gregorian */\n\t\tvar d = new Date(1900, 0, 1);\n\t\td.setDate(d.getDate() + date - 1);\n\t\tdout = [d.getFullYear(), d.getMonth()+1,d.getDate()];\n\t\tdow = d.getDay();\n\t\tif(date < 60) dow = (dow + 6) % 7;\n\t\tif(b2) dow = fix_hijri(d, dout);\n\t}\n\tout.y = dout[0]; out.m = dout[1]; out.d = dout[2];\n\tout.S = time % 60; time = Math.floor(time / 60);\n\tout.M = time % 60; time = Math.floor(time / 60);\n\tout.H = time;\n\tout.q = dow;\n\treturn out;\n}\nSSF.parse_date_code = parse_date_code;\nvar basedate = new Date(1899, 11, 31, 0, 0, 0);\nvar dnthresh = basedate.getTime();\nvar base1904 = new Date(1900, 2, 1, 0, 0, 0);\nfunction datenum_local(v, date1904) {\n\tvar epoch = v.getTime();\n\tif(date1904) epoch -= 1461*24*60*60*1000;\n\telse if(v >= base1904) epoch += 24*60*60*1000;\n\treturn (epoch - (dnthresh + (v.getTimezoneOffset() - basedate.getTimezoneOffset()) * 60000)) / (24 * 60 * 60 * 1000);\n}\nfunction general_fmt_int(v) { return v.toString(10); }\nSSF._general_int = general_fmt_int;\nvar general_fmt_num = (function make_general_fmt_num() {\nvar gnr1 = /\\.(\\d*[1-9])0+$/, gnr2 = /\\.0*$/, gnr4 = /\\.(\\d*[1-9])0+/, gnr5 = /\\.0*[Ee]/, gnr6 = /(E[+-])(\\d)$/;\nfunction gfn2(v) {\n\tvar w = (v<0?12:11);\n\tvar o = gfn5(v.toFixed(12)); if(o.length <= w) return o;\n\to = v.toPrecision(10); if(o.length <= w) return o;\n\treturn v.toExponential(5);\n}\nfunction gfn3(v) {\n\tvar o = v.toFixed(11).replace(gnr1,\".$1\");\n\tif(o.length > (v<0?12:11)) o = v.toPrecision(6);\n\treturn o;\n}\nfunction gfn4(o) {\n\tfor(var i = 0; i != o.length; ++i) if((o.charCodeAt(i) | 0x20) === 101) return o.replace(gnr4,\".$1\").replace(gnr5,\"E\").replace(\"e\",\"E\").replace(gnr6,\"$10$2\");\n\treturn o;\n}\nfunction gfn5(o) {\n\treturn o.indexOf(\".\") > -1 ? o.replace(gnr2,\"\").replace(gnr1,\".$1\") : o;\n}\nreturn function general_fmt_num(v) {\n\tvar V = Math.floor(Math.log(Math.abs(v))*Math.LOG10E), o;\n\tif(V >= -4 && V <= -1) o = v.toPrecision(10+V);\n\telse if(Math.abs(V) <= 9) o = gfn2(v);\n\telse if(V === 10) o = v.toFixed(10).substr(0,12);\n\telse o = gfn3(v);\n\treturn gfn5(gfn4(o));\n};})();\nSSF._general_num = general_fmt_num;\nfunction general_fmt(v, opts) {\n\tswitch(typeof v) {\n\t\tcase 'string': return v;\n\t\tcase 'boolean': return v ? \"TRUE\" : \"FALSE\";\n\t\tcase 'number': return (v|0) === v ? v.toString(10) : general_fmt_num(v);\n\t\tcase 'undefined': return \"\";\n\t\tcase 'object':\n\t\t\tif(v == null) return \"\";\n\t\t\tif(v instanceof Date) return format(14, datenum_local(v, opts && opts.date1904), opts);\n\t}\n\tthrow new Error(\"unsupported value in General format: \" + v);\n}\nSSF._general = general_fmt;\nfunction fix_hijri() { return 0; }\n/*jshint -W086 */\nfunction write_date(type, fmt, val, ss0) {\n\tvar o=\"\", ss=0, tt=0, y = val.y, out, outl = 0;\n\tswitch(type) {\n\t\tcase 98: /* 'b' buddhist year */\n\t\t\ty = val.y + 543;\n\t\t\t/* falls through */\n\t\tcase 121: /* 'y' year */\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: case 2: out = y % 100; outl = 2; break;\n\t\t\tdefault: out = y % 10000; outl = 4; break;\n\t\t} break;\n\t\tcase 109: /* 'm' month */\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: case 2: out = val.m; outl = fmt.length; break;\n\t\t\tcase 3: return months[val.m-1][1];\n\t\t\tcase 5: return months[val.m-1][0];\n\t\t\tdefault: return months[val.m-1][2];\n\t\t} break;\n\t\tcase 100: /* 'd' day */\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: case 2: out = val.d; outl = fmt.length; break;\n\t\t\tcase 3: return days[val.q][0];\n\t\t\tdefault: return days[val.q][1];\n\t\t} break;\n\t\tcase 104: /* 'h' 12-hour */\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: case 2: out = 1+(val.H+11)%12; outl = fmt.length; break;\n\t\t\tdefault: throw 'bad hour format: ' + fmt;\n\t\t} break;\n\t\tcase 72: /* 'H' 24-hour */\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: case 2: out = val.H; outl = fmt.length; break;\n\t\t\tdefault: throw 'bad hour format: ' + fmt;\n\t\t} break;\n\t\tcase 77: /* 'M' minutes */\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: case 2: out = val.M; outl = fmt.length; break;\n\t\t\tdefault: throw 'bad minute format: ' + fmt;\n\t\t} break;\n\t\tcase 115: /* 's' seconds */\n\t\t\tif(fmt != 's' && fmt != 'ss' && fmt != '.0' && fmt != '.00' && fmt != '.000') throw 'bad second format: ' + fmt;\n\t\t\tif(val.u === 0 && (fmt == \"s\" || fmt == \"ss\")) return pad0(val.S, fmt.length);\nif(ss0 >= 2) tt = ss0 === 3 ? 1000 : 100;\n\t\t\telse tt = ss0 === 1 ? 10 : 1;\n\t\t\tss = Math.round((tt)*(val.S + val.u));\n\t\t\tif(ss >= 60*tt) ss = 0;\n\t\t\tif(fmt === 's') return ss === 0 ? \"0\" : \"\"+ss/tt;\n\t\t\to = pad0(ss,2 + ss0);\n\t\t\tif(fmt === 'ss') return o.substr(0,2);\n\t\t\treturn \".\" + o.substr(2,fmt.length-1);\n\t\tcase 90: /* 'Z' absolute time */\n\t\tswitch(fmt) {\n\t\t\tcase '[h]': case '[hh]': out = val.D*24+val.H; break;\n\t\t\tcase '[m]': case '[mm]': out = (val.D*24+val.H)*60+val.M; break;\n\t\t\tcase '[s]': case '[ss]': out = ((val.D*24+val.H)*60+val.M)*60+Math.round(val.S+val.u); break;\n\t\t\tdefault: throw 'bad abstime format: ' + fmt;\n\t\t} outl = fmt.length === 3 ? 1 : 2; break;\n\t\tcase 101: /* 'e' era */\n\t\t\tout = y; outl = 1;\n\t}\n\tif(outl > 0) return pad0(out, outl); else return \"\";\n}\n/*jshint +W086 */\nfunction commaify(s) {\n\tvar w = 3;\n\tif(s.length <= w) return s;\n\tvar j = (s.length % w), o = s.substr(0,j);\n\tfor(; j!=s.length; j+=w) o+=(o.length > 0 ? \",\" : \"\") + s.substr(j,w);\n\treturn o;\n}\nvar write_num = (function make_write_num(){\nvar pct1 = /%/g;\nfunction write_num_pct(type, fmt, val){\n\tvar sfmt = fmt.replace(pct1,\"\"), mul = fmt.length - sfmt.length;\n\treturn write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill(\"%\",mul);\n}\nfunction write_num_cm(type, fmt, val){\n\tvar idx = fmt.length - 1;\n\twhile(fmt.charCodeAt(idx-1) === 44) --idx;\n\treturn write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));\n}\nfunction write_num_exp(fmt, val){\n\tvar o;\n\tvar idx = fmt.indexOf(\"E\") - fmt.indexOf(\".\") - 1;\n\tif(fmt.match(/^#+0.0E\\+0$/)) {\n\t\tif(val == 0) return \"0.0E+0\";\n\t\telse if(val < 0) return \"-\" + write_num_exp(fmt, -val);\n\t\tvar period = fmt.indexOf(\".\"); if(period === -1) period=fmt.indexOf('E');\n\t\tvar ee = Math.floor(Math.log(val)*Math.LOG10E)%period;\n\t\tif(ee < 0) ee += period;\n\t\to = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);\n\t\tif(o.indexOf(\"e\") === -1) {\n\t\t\tvar fakee = Math.floor(Math.log(val)*Math.LOG10E);\n\t\t\tif(o.indexOf(\".\") === -1) o = o.charAt(0) + \".\" + o.substr(1) + \"E+\" + (fakee - o.length+ee);\n\t\t\telse o += \"E+\" + (fakee - ee);\n\t\t\twhile(o.substr(0,2) === \"0.\") {\n\t\t\t\to = o.charAt(0) + o.substr(2,period) + \".\" + o.substr(2+period);\n\t\t\t\to = o.replace(/^0+([1-9])/,\"$1\").replace(/^0+\\./,\"0.\");\n\t\t\t}\n\t\t\to = o.replace(/\\+-/,\"-\");\n\t\t}\n\t\to = o.replace(/^([+-]?)(\\d*)\\.(\\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + \".\" + $3.substr(ee) + \"E\"; });\n\t} else o = val.toExponential(idx);\n\tif(fmt.match(/E\\+00$/) && o.match(/e[+-]\\d$/)) o = o.substr(0,o.length-1) + \"0\" + o.charAt(o.length-1);\n\tif(fmt.match(/E\\-/) && o.match(/e\\+/)) o = o.replace(/e\\+/,\"e\");\n\treturn o.replace(\"e\",\"E\");\n}\nvar frac1 = /# (\\?+)( ?)\\/( ?)(\\d+)/;\nfunction write_num_f1(r, aval, sign) {\n\tvar den = parseInt(r[4],10), rr = Math.round(aval * den), base = Math.floor(rr/den);\n\tvar myn = (rr - base*den), myd = den;\n\treturn sign + (base === 0 ? \"\" : \"\"+base) + \" \" + (myn === 0 ? fill(\" \", r[1].length + 1 + r[4].length) : pad_(myn,r[1].length) + r[2] + \"/\" + r[3] + pad0(myd,r[4].length));\n}\nfunction write_num_f2(r, aval, sign) {\n\treturn sign + (aval === 0 ? \"\" : \"\"+aval) + fill(\" \", r[1].length + 2 + r[4].length);\n}\nvar dec1 = /^#*0*\\.([0#]+)/;\nvar closeparen = /\\).*[0#]/;\nvar phone = /\\(###\\) ###\\\\?-####/;\nfunction hashq(str) {\n\tvar o = \"\", cc;\n\tfor(var i = 0; i != str.length; ++i) switch((cc=str.charCodeAt(i))) {\n\t\tcase 35: break;\n\t\tcase 63: o+= \" \"; break;\n\t\tcase 48: o+= \"0\"; break;\n\t\tdefault: o+= String.fromCharCode(cc);\n\t}\n\treturn o;\n}\nfunction rnd(val, d) { var dd = Math.pow(10,d); return \"\"+(Math.round(val * dd)/dd); }\nfunction dec(val, d) {\n\tif (d < ('' + Math.round((val-Math.floor(val))*Math.pow(10,d))).length) {\n\t\treturn 0;\n\t}\n\treturn Math.round((val-Math.floor(val))*Math.pow(10,d));\n}\nfunction carry(val, d) {\n\tif (d < ('' + Math.round((val-Math.floor(val))*Math.pow(10,d))).length) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\nfunction flr(val) { if(val < 2147483647 && val > -2147483648) return \"\"+(val >= 0 ? (val|0) : (val-1|0)); return \"\"+Math.floor(val); }\nfunction write_num_flt(type, fmt, val) {\n\tif(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {\n\t\tvar ffmt = fmt.replace(/\\( */,\"\").replace(/ \\)/,\"\").replace(/\\)/,\"\");\n\t\tif(val >= 0) return write_num_flt('n', ffmt, val);\n\t\treturn '(' + write_num_flt('n', ffmt, -val) + ')';\n\t}\n\tif(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);\n\tif(fmt.indexOf('%') !== -1) return write_num_pct(type, fmt, val);\n\tif(fmt.indexOf('E') !== -1) return write_num_exp(fmt, val);\n\tif(fmt.charCodeAt(0) === 36) return \"$\"+write_num_flt(type,fmt.substr(fmt.charAt(1)==' '?2:1),val);\n\tvar o;\n\tvar r, ri, ff, aval = Math.abs(val), sign = val < 0 ? \"-\" : \"\";\n\tif(fmt.match(/^00+$/)) return sign + pad0r(aval,fmt.length);\n\tif(fmt.match(/^[#?]+$/)) {\n\t\to = pad0r(val,0); if(o === \"0\") o = \"\";\n\t\treturn o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;\n\t}\n\tif((r = fmt.match(frac1))) return write_num_f1(r, aval, sign);\n\tif(fmt.match(/^#+0+$/)) return sign + pad0r(aval,fmt.length - fmt.indexOf(\"0\"));\n\tif((r = fmt.match(dec1))) {\n\t\to = rnd(val, r[1].length).replace(/^([^\\.]+)$/,\"$1.\"+hashq(r[1])).replace(/\\.$/,\".\"+hashq(r[1])).replace(/\\.(\\d*)$/,function($$, $1) { return \".\" + $1 + fill(\"0\", hashq(r[1]).length-$1.length); });\n\t\treturn fmt.indexOf(\"0.\") !== -1 ? o : o.replace(/^0\\./,\".\");\n\t}\n\tfmt = fmt.replace(/^#+([0.])/, \"$1\");\n\tif((r = fmt.match(/^(0*)\\.(#*)$/))) {\n\t\treturn sign + rnd(aval, r[2].length).replace(/\\.(\\d*[1-9])0*$/,\".$1\").replace(/^(-?\\d*)$/,\"$1.\").replace(/^0\\./,r[1].length?\"0.\":\".\");\n\t}\n\tif((r = fmt.match(/^#{1,3},##0(\\.?)$/))) return sign + commaify(pad0r(aval,0));\n\tif((r = fmt.match(/^#,##0\\.([#0]*0)$/))) {\n\t\treturn val < 0 ? \"-\" + write_num_flt(type, fmt, -val) : commaify(\"\"+(Math.floor(val) + carry(val, r[1].length))) + \".\" + pad0(dec(val, r[1].length),r[1].length);\n\t}\n\tif((r = fmt.match(/^#,#*,#0/))) return write_num_flt(type,fmt.replace(/^#,#*,/,\"\"),val);\n\tif((r = fmt.match(/^([0#]+)(\\\\?-([0#]+))+$/))) {\n\t\to = _strrev(write_num_flt(type, fmt.replace(/[\\\\-]/g,\"\"), val));\n\t\tri = 0;\n\t\treturn _strrev(_strrev(fmt.replace(/\\\\/g,\"\")).replace(/[0#]/g,function(x){return ri<o.length?o.charAt(ri++):x==='0'?'0':\"\";}));\n\t}\n\tif(fmt.match(phone)) {\n\t\to = write_num_flt(type, \"##########\", val);\n\t\treturn \"(\" + o.substr(0,3) + \") \" + o.substr(3, 3) + \"-\" + o.substr(6);\n\t}\n\tvar oa = \"\";\n\tif((r = fmt.match(/^([#0?]+)( ?)\\/( ?)([#0?]+)/))) {\n\t\tri = Math.min(r[4].length,7);\n\t\tff = frac(aval, Math.pow(10,ri)-1, false);\n\t\to = \"\" + sign;\n\t\toa = write_num(\"n\", r[1], ff[1]);\n\t\tif(oa.charAt(oa.length-1) == \" \") oa = oa.substr(0,oa.length-1) + \"0\";\n\t\to += oa + r[2] + \"/\" + r[3];\n\t\toa = rpad_(ff[2],ri);\n\t\tif(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;\n\t\to += oa;\n\t\treturn o;\n\t}\n\tif((r = fmt.match(/^# ([#0?]+)( ?)\\/( ?)([#0?]+)/))) {\n\t\tri = Math.min(Math.max(r[1].length, r[4].length),7);\n\t\tff = frac(aval, Math.pow(10,ri)-1, true);\n\t\treturn sign + (ff[0]||(ff[1] ? \"\" : \"0\")) + \" \" + (ff[1] ? pad_(ff[1],ri) + r[2] + \"/\" + r[3] + rpad_(ff[2],ri): fill(\" \", 2*ri+1 + r[2].length + r[3].length));\n\t}\n\tif((r = fmt.match(/^[#0?]+$/))) {\n\t\to = pad0r(val, 0);\n\t\tif(fmt.length <= o.length) return o;\n\t\treturn hashq(fmt.substr(0,fmt.length-o.length)) + o;\n\t}\n\tif((r = fmt.match(/^([#0?]+)\\.([#0]+)$/))) {\n\t\to = \"\" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,\"$1\");\n\t\tri = o.indexOf(\".\");\n\t\tvar lres = fmt.indexOf(\".\") - ri, rres = fmt.length - o.length - lres;\n\t\treturn hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));\n\t}\n\tif((r = fmt.match(/^00,000\\.([#0]*0)$/))) {\n\t\tri = dec(val, r[1].length);\n\t\treturn val < 0 ? \"-\" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\\d,\\d{3}$/,\"0$&\").replace(/^\\d*$/,function($$) { return \"00,\" + ($$.length < 3 ? pad0(0,3-$$.length) : \"\") + $$; }) + \".\" + pad0(ri,r[1].length);\n\t}\n\tswitch(fmt) {\n\t\tcase \"###,##0.00\": return write_num_flt(type, \"#,##0.00\", val);\n\t\tcase \"###,###\":\n\t\tcase \"##,###\":\n\t\tcase \"#,###\": var x = commaify(pad0r(aval,0)); return x !== \"0\" ? sign + x : \"\";\n\t\tcase \"###,###.00\": return write_num_flt(type, \"###,##0.00\",val).replace(/^0\\./,\".\");\n\t\tcase \"#,###.00\": return write_num_flt(type, \"#,##0.00\",val).replace(/^0\\./,\".\");\n\t\tdefault:\n\t}\n\tthrow new Error(\"unsupported format |\" + fmt + \"|\");\n}\nfunction write_num_cm2(type, fmt, val){\n\tvar idx = fmt.length - 1;\n\twhile(fmt.charCodeAt(idx-1) === 44) --idx;\n\treturn write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));\n}\nfunction write_num_pct2(type, fmt, val){\n\tvar sfmt = fmt.replace(pct1,\"\"), mul = fmt.length - sfmt.length;\n\treturn write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill(\"%\",mul);\n}\nfunction write_num_exp2(fmt, val){\n\tvar o;\n\tvar idx = fmt.indexOf(\"E\") - fmt.indexOf(\".\") - 1;\n\tif(fmt.match(/^#+0.0E\\+0$/)) {\n\t\tif(val == 0) return \"0.0E+0\";\n\t\telse if(val < 0) return \"-\" + write_num_exp2(fmt, -val);\n\t\tvar period = fmt.indexOf(\".\"); if(period === -1) period=fmt.indexOf('E');\n\t\tvar ee = Math.floor(Math.log(val)*Math.LOG10E)%period;\n\t\tif(ee < 0) ee += period;\n\t\to = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);\n\t\tif(!o.match(/[Ee]/)) {\n\t\t\tvar fakee = Math.floor(Math.log(val)*Math.LOG10E);\n\t\t\tif(o.indexOf(\".\") === -1) o = o.charAt(0) + \".\" + o.substr(1) + \"E+\" + (fakee - o.length+ee);\n\t\t\telse o += \"E+\" + (fakee - ee);\n\t\t\to = o.replace(/\\+-/,\"-\");\n\t\t}\n\t\to = o.replace(/^([+-]?)(\\d*)\\.(\\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + \".\" + $3.substr(ee) + \"E\"; });\n\t} else o = val.toExponential(idx);\n\tif(fmt.match(/E\\+00$/) && o.match(/e[+-]\\d$/)) o = o.substr(0,o.length-1) + \"0\" + o.charAt(o.length-1);\n\tif(fmt.match(/E\\-/) && o.match(/e\\+/)) o = o.replace(/e\\+/,\"e\");\n\treturn o.replace(\"e\",\"E\");\n}\nfunction write_num_int(type, fmt, val) {\n\tif(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {\n\t\tvar ffmt = fmt.replace(/\\( */,\"\").replace(/ \\)/,\"\").replace(/\\)/,\"\");\n\t\tif(val >= 0) return write_num_int('n', ffmt, val);\n\t\treturn '(' + write_num_int('n', ffmt, -val) + ')';\n\t}\n\tif(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);\n\tif(fmt.indexOf('%') !== -1) return write_num_pct2(type, fmt, val);\n\tif(fmt.indexOf('E') !== -1) return write_num_exp2(fmt, val);\n\tif(fmt.charCodeAt(0) === 36) return \"$\"+write_num_int(type,fmt.substr(fmt.charAt(1)==' '?2:1),val);\n\tvar o;\n\tvar r, ri, ff, aval = Math.abs(val), sign = val < 0 ? \"-\" : \"\";\n\tif(fmt.match(/^00+$/)) return sign + pad0(aval,fmt.length);\n\tif(fmt.match(/^[#?]+$/)) {\n\t\to = (\"\"+val); if(val === 0) o = \"\";\n\t\treturn o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;\n\t}\n\tif((r = fmt.match(frac1))) return write_num_f2(r, aval, sign);\n\tif(fmt.match(/^#+0+$/)) return sign + pad0(aval,fmt.length - fmt.indexOf(\"0\"));\n\tif((r = fmt.match(dec1))) {\no = (\"\"+val).replace(/^([^\\.]+)$/,\"$1.\"+hashq(r[1])).replace(/\\.$/,\".\"+hashq(r[1]));\n\t\to = o.replace(/\\.(\\d*)$/,function($$, $1) {\nreturn \".\" + $1 + fill(\"0\", hashq(r[1]).length-$1.length); });\n\t\treturn fmt.indexOf(\"0.\") !== -1 ? o : o.replace(/^0\\./,\".\");\n\t}\n\tfmt = fmt.replace(/^#+([0.])/, \"$1\");\n\tif((r = fmt.match(/^(0*)\\.(#*)$/))) {\n\t\treturn sign + (\"\"+aval).replace(/\\.(\\d*[1-9])0*$/,\".$1\").replace(/^(-?\\d*)$/,\"$1.\").replace(/^0\\./,r[1].length?\"0.\":\".\");\n\t}\n\tif((r = fmt.match(/^#{1,3},##0(\\.?)$/))) return sign + commaify((\"\"+aval));\n\tif((r = fmt.match(/^#,##0\\.([#0]*0)$/))) {\n\t\treturn val < 0 ? \"-\" + write_num_int(type, fmt, -val) : commaify((\"\"+val)) + \".\" + fill('0',r[1].length);\n\t}\n\tif((r = fmt.match(/^#,#*,#0/))) return write_num_int(type,fmt.replace(/^#,#*,/,\"\"),val);\n\tif((r = fmt.match(/^([0#]+)(\\\\?-([0#]+))+$/))) {\n\t\to = _strrev(write_num_int(type, fmt.replace(/[\\\\-]/g,\"\"), val));\n\t\tri = 0;\n\t\treturn _strrev(_strrev(fmt.replace(/\\\\/g,\"\")).replace(/[0#]/g,function(x){return ri<o.length?o.charAt(ri++):x==='0'?'0':\"\";}));\n\t}\n\tif(fmt.match(phone)) {\n\t\to = write_num_int(type, \"##########\", val);\n\t\treturn \"(\" + o.substr(0,3) + \") \" + o.substr(3, 3) + \"-\" + o.substr(6);\n\t}\n\tvar oa = \"\";\n\tif((r = fmt.match(/^([#0?]+)( ?)\\/( ?)([#0?]+)/))) {\n\t\tri = Math.min(r[4].length,7);\n\t\tff = frac(aval, Math.pow(10,ri)-1, false);\n\t\to = \"\" + sign;\n\t\toa = write_num(\"n\", r[1], ff[1]);\n\t\tif(oa.charAt(oa.length-1) == \" \") oa = oa.substr(0,oa.length-1) + \"0\";\n\t\to += oa + r[2] + \"/\" + r[3];\n\t\toa = rpad_(ff[2],ri);\n\t\tif(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;\n\t\to += oa;\n\t\treturn o;\n\t}\n\tif((r = fmt.match(/^# ([#0?]+)( ?)\\/( ?)([#0?]+)/))) {\n\t\tri = Math.min(Math.max(r[1].length, r[4].length),7);\n\t\tff = frac(aval, Math.pow(10,ri)-1, true);\n\t\treturn sign + (ff[0]||(ff[1] ? \"\" : \"0\")) + \" \" + (ff[1] ? pad_(ff[1],ri) + r[2] + \"/\" + r[3] + rpad_(ff[2],ri): fill(\" \", 2*ri+1 + r[2].length + r[3].length));\n\t}\n\tif((r = fmt.match(/^[#0?]+$/))) {\n\t\to = \"\" + val;\n\t\tif(fmt.length <= o.length) return o;\n\t\treturn hashq(fmt.substr(0,fmt.length-o.length)) + o;\n\t}\n\tif((r = fmt.match(/^([#0]+)\\.([#0]+)$/))) {\n\t\to = \"\" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,\"$1\");\n\t\tri = o.indexOf(\".\");\n\t\tvar lres = fmt.indexOf(\".\") - ri, rres = fmt.length - o.length - lres;\n\t\treturn hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));\n\t}\n\tif((r = fmt.match(/^00,000\\.([#0]*0)$/))) {\n\t\treturn val < 0 ? \"-\" + write_num_int(type, fmt, -val) : commaify(\"\"+val).replace(/^\\d,\\d{3}$/,\"0$&\").replace(/^\\d*$/,function($$) { return \"00,\" + ($$.length < 3 ? pad0(0,3-$$.length) : \"\") + $$; }) + \".\" + pad0(0,r[1].length);\n\t}\n\tswitch(fmt) {\n\t\tcase \"###,###\":\n\t\tcase \"##,###\":\n\t\tcase \"#,###\": var x = commaify(\"\"+aval); return x !== \"0\" ? sign + x : \"\";\n\t\tdefault:\n\t\t\tif(fmt.match(/\\.[0#?]*$/)) return write_num_int(type, fmt.slice(0,fmt.lastIndexOf(\".\")), val) + hashq(fmt.slice(fmt.lastIndexOf(\".\")));\n\t}\n\tthrow new Error(\"unsupported format |\" + fmt + \"|\");\n}\nreturn function write_num(type, fmt, val) {\n\treturn (val|0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);\n};})();\nfunction split_fmt(fmt) {\n\tvar out = [];\n\tvar in_str = false/*, cc*/;\n\tfor(var i = 0, j = 0; i < fmt.length; ++i) switch((/*cc=*/fmt.charCodeAt(i))) {\n\t\tcase 34: /* '\"' */\n\t\t\tin_str = !in_str; break;\n\t\tcase 95: case 42: case 92: /* '_' '*' '\\\\' */\n\t\t\t++i; break;\n\t\tcase 59: /* ';' */\n\t\t\tout[out.length] = fmt.substr(j,i-j);\n\t\t\tj = i+1;\n\t}\n\tout[out.length] = fmt.substr(j);\n\tif(in_str === true) throw new Error(\"Format |\" + fmt + \"| unterminated string \");\n\treturn out;\n}\nSSF._split = split_fmt;\nvar abstime = /\\[[HhMmSs]*\\]/;\nfunction fmt_is_date(fmt) {\n\tvar i = 0, /*cc = 0,*/ c = \"\", o = \"\";\n\twhile(i < fmt.length) {\n\t\tswitch((c = fmt.charAt(i))) {\n\t\t\tcase 'G': if(isgeneral(fmt, i)) i+= 6; i++; break;\n\t\t\tcase '\"': for(;(/*cc=*/fmt.charCodeAt(++i)) !== 34 && i < fmt.length;){/*empty*/} ++i; break;\n\t\t\tcase '\\\\': i+=2; break;\n\t\t\tcase '_': i+=2; break;\n\t\t\tcase '@': ++i; break;\n\t\t\tcase 'B': case 'b':\n\t\t\t\tif(fmt.charAt(i+1) === \"1\" || fmt.charAt(i+1) === \"2\") return true;\n\t\t\t\t/* falls through */\n\t\t\tcase 'M': case 'D': case 'Y': case 'H': case 'S': case 'E':\n\t\t\t\t/* falls through */\n\t\t\tcase 'm': case 'd': case 'y': case 'h': case 's': case 'e': case 'g': return true;\n\t\t\tcase 'A': case 'a':\n\t\t\t\tif(fmt.substr(i, 3).toUpperCase() === \"A/P\") return true;\n\t\t\t\tif(fmt.substr(i, 5).toUpperCase() === \"AM/PM\") return true;\n\t\t\t\t++i; break;\n\t\t\tcase '[':\n\t\t\t\to = c;\n\t\t\t\twhile(fmt.charAt(i++) !== ']' && i < fmt.length) o += fmt.charAt(i);\n\t\t\t\tif(o.match(abstime)) return true;\n\t\t\t\tbreak;\n\t\t\tcase '.':\n\t\t\t\t/* falls through */\n\t\t\tcase '0': case '#':\n\t\t\t\twhile(i < fmt.length && (\"0#?.,E+-%\".indexOf(c=fmt.charAt(++i)) > -1 || (c=='\\\\' && fmt.charAt(i+1) == \"-\" && \"0#\".indexOf(fmt.charAt(i+2))>-1))){/* empty */}\n\t\t\t\tbreak;\n\t\t\tcase '?': while(fmt.charAt(++i) === c){/* empty */} break;\n\t\t\tcase '*': ++i; if(fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i; break;\n\t\t\tcase '(': case ')': ++i; break;\n\t\t\tcase '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':\n\t\t\t\twhile(i < fmt.length && \"0123456789\".indexOf(fmt.charAt(++i)) > -1){/* empty */} break;\n\t\t\tcase ' ': ++i; break;\n\t\t\tdefault: ++i; break;\n\t\t}\n\t}\n\treturn false;\n}\nSSF.is_date = fmt_is_date;\nfunction eval_fmt(fmt, v, opts, flen) {\n\tvar out = [], o = \"\", i = 0, c = \"\", lst='t', dt, j, cc;\n\tvar hr='H';\n\t/* Tokenize */\n\twhile(i < fmt.length) {\n\t\tswitch((c = fmt.charAt(i))) {\n\t\t\tcase 'G': /* General */\n\t\t\t\tif(!isgeneral(fmt, i)) throw new Error('unrecognized character ' + c + ' in ' +fmt);\n\t\t\t\tout[out.length] = {t:'G', v:'General'}; i+=7; break;\n\t\t\tcase '\"': /* Literal text */\n\t\t\t\tfor(o=\"\";(cc=fmt.charCodeAt(++i)) !== 34 && i < fmt.length;) o += String.fromCharCode(cc);\n\t\t\t\tout[out.length] = {t:'t', v:o}; ++i; break;\n\t\t\tcase '\\\\': var w = fmt.charAt(++i), t = (w === \"(\" || w === \")\") ? w : 't';\n\t\t\t\tout[out.length] = {t:t, v:w}; ++i; break;\n\t\t\tcase '_': out[out.length] = {t:'t', v:\" \"}; i+=2; break;\n\t\t\tcase '@': /* Text Placeholder */\n\t\t\t\tout[out.length] = {t:'T', v:v}; ++i; break;\n\t\t\tcase 'B': case 'b':\n\t\t\t\tif(fmt.charAt(i+1) === \"1\" || fmt.charAt(i+1) === \"2\") {\n\t\t\t\t\tif(dt==null) { dt=parse_date_code(v, opts, fmt.charAt(i+1) === \"2\"); if(dt==null) return \"\"; }\n\t\t\t\t\tout[out.length] = {t:'X', v:fmt.substr(i,2)}; lst = c; i+=2; break;\n\t\t\t\t}\n\t\t\t\t/* falls through */\n\t\t\tcase 'M': case 'D': case 'Y': case 'H': case 'S': case 'E':\n\t\t\t\tc = c.toLowerCase();\n\t\t\t\t/* falls through */\n\t\t\tcase 'm': case 'd': case 'y': case 'h': case 's': case 'e': case 'g':\n\t\t\t\tif(v < 0) return \"\";\n\t\t\t\tif(dt==null) { dt=parse_date_code(v, opts); if(dt==null) return \"\"; }\n\t\t\t\to = c; while(++i < fmt.length && fmt.charAt(i).toLowerCase() === c) o+=c;\n\t\t\t\tif(c === 'm' && lst.toLowerCase() === 'h') c = 'M';\n\t\t\t\tif(c === 'h') c = hr;\n\t\t\t\tout[out.length] = {t:c, v:o}; lst = c; break;\n\t\t\tcase 'A': case 'a':\n\t\t\t\tvar q={t:c, v:c};\n\t\t\t\tif(dt==null) dt=parse_date_code(v, opts);\n\t\t\t\tif(fmt.substr(i, 3).toUpperCase() === \"A/P\") { if(dt!=null) q.v = dt.H >= 12 ? \"P\" : \"A\"; q.t = 'T'; hr='h';i+=3;}\n\t\t\t\telse if(fmt.substr(i,5).toUpperCase() === \"AM/PM\") { if(dt!=null) q.v = dt.H >= 12 ? \"PM\" : \"AM\"; q.t = 'T'; i+=5; hr='h'; }\n\t\t\t\telse { q.t = \"t\"; ++i; }\n\t\t\t\tif(dt==null && q.t === 'T') return \"\";\n\t\t\t\tout[out.length] = q; lst = c; break;\n\t\t\tcase '[':\n\t\t\t\to = c;\n\t\t\t\twhile(fmt.charAt(i++) !== ']' && i < fmt.length) o += fmt.charAt(i);\n\t\t\t\tif(o.slice(-1) !== ']') throw 'unterminated \"[\" block: |' + o + '|';\n\t\t\t\tif(o.match(abstime)) {\n\t\t\t\t\tif(dt==null) { dt=parse_date_code(v, opts); if(dt==null) return \"\"; }\n\t\t\t\t\tout[out.length] = {t:'Z', v:o.toLowerCase()};\n\t\t\t\t\tlst = o.charAt(1);\n\t\t\t\t} else if(o.indexOf(\"$\") > -1) {\n\t\t\t\t\to = (o.match(/\\$([^-\\[\\]]*)/)||[])[1]||\"$\";\n\t\t\t\t\tif(!fmt_is_date(fmt)) out[out.length] = {t:'t',v:o};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t/* Numbers */\n\t\t\tcase '.':\n\t\t\t\tif(dt != null) {\n\t\t\t\t\to = c; while(++i < fmt.length && (c=fmt.charAt(i)) === \"0\") o += c;\n\t\t\t\t\tout[out.length] = {t:'s', v:o}; break;\n\t\t\t\t}\n\t\t\t\t/* falls through */\n\t\t\tcase '0': case '#':\n\t\t\t\to = c; while(++i < fmt.length && \"0#?.,E+-%\".indexOf(c=fmt.charAt(i)) > -1) o += c;\n\t\t\t\tout[out.length] = {t:'n', v:o}; break;\n\t\t\tcase '?':\n\t\t\t\to = c; while(fmt.charAt(++i) === c) o+=c;\n\t\t\t\tout[out.length] = {t:c, v:o}; lst = c; break;\n\t\t\tcase '*': ++i; if(fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i; break; // **\n\t\t\tcase '(': case ')': out[out.length] = {t:(flen===1?'t':c), v:c}; ++i; break;\n\t\t\tcase '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':\n\t\t\t\to = c; while(i < fmt.length && \"0123456789\".indexOf(fmt.charAt(++i)) > -1) o+=fmt.charAt(i);\n\t\t\t\tout[out.length] = {t:'D', v:o}; break;\n\t\t\tcase ' ': out[out.length] = {t:c, v:c}; ++i; break;\n\t\t\tcase \"$\": out[out.length] = {t:'t', v:'$'}; ++i; break;\n\t\t\tdefault:\n\t\t\t\tif(\",$-+/():!^&'~{}<>=€acfijklopqrtuvwxzP\".indexOf(c) === -1) throw new Error('unrecognized character ' + c + ' in ' + fmt);\n\t\t\t\tout[out.length] = {t:'t', v:c}; ++i; break;\n\t\t}\n\t}\n\tvar bt = 0, ss0 = 0, ssm;\n\tfor(i=out.length-1, lst='t'; i >= 0; --i) {\n\t\tswitch(out[i].t) {\n\t\t\tcase 'h': case 'H': out[i].t = hr; lst='h'; if(bt < 1) bt = 1; break;\n\t\t\tcase 's':\n\t\t\t\tif((ssm=out[i].v.match(/\\.0+$/))) ss0=Math.max(ss0,ssm[0].length-1);\n\t\t\t\tif(bt < 3) bt = 3;\n\t\t\t/* falls through */\n\t\t\tcase 'd': case 'y': case 'M': case 'e': lst=out[i].t; break;\n\t\t\tcase 'm': if(lst === 's') { out[i].t = 'M'; if(bt < 2) bt = 2; } break;\n\t\t\tcase 'X': /*if(out[i].v === \"B2\");*/\n\t\t\t\tbreak;\n\t\t\tcase 'Z':\n\t\t\t\tif(bt < 1 && out[i].v.match(/[Hh]/)) bt = 1;\n\t\t\t\tif(bt < 2 && out[i].v.match(/[Mm]/)) bt = 2;\n\t\t\t\tif(bt < 3 && out[i].v.match(/[Ss]/)) bt = 3;\n\t\t}\n\t}\n\tswitch(bt) {\n\t\tcase 0: break;\n\t\tcase 1:\nif(dt.u >= 0.5) { dt.u = 0; ++dt.S; }\n\t\t\tif(dt.S >=  60) { dt.S = 0; ++dt.M; }\n\t\t\tif(dt.M >=  60) { dt.M = 0; ++dt.H; }\n\t\t\tbreak;\n\t\tcase 2:\nif(dt.u >= 0.5) { dt.u = 0; ++dt.S; }\n\t\t\tif(dt.S >=  60) { dt.S = 0; ++dt.M; }\n\t\t\tbreak;\n\t}\n\t/* replace fields */\n\tvar nstr = \"\", jj;\n\tfor(i=0; i < out.length; ++i) {\n\t\tswitch(out[i].t) {\n\t\t\tcase 't': case 'T': case ' ': case 'D': break;\n\t\t\tcase 'X': out[i].v = \"\"; out[i].t = \";\"; break;\n\t\t\tcase 'd': case 'm': case 'y': case 'h': case 'H': case 'M': case 's': case 'e': case 'b': case 'Z':\nout[i].v = write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);\n\t\t\t\tout[i].t = 't'; break;\n\t\t\tcase 'n': case '?':\n\t\t\t\tjj = i+1;\n\t\t\t\twhile(out[jj] != null && (\n\t\t\t\t\t(c=out[jj].t) === \"?\" || c === \"D\" ||\n\t\t\t\t\t((c === \" \" || c === \"t\") && out[jj+1] != null && (out[jj+1].t === '?' || out[jj+1].t === \"t\" && out[jj+1].v === '/')) ||\n\t\t\t\t\t(out[i].t === '(' && (c === ' ' || c === 'n' || c === ')')) ||\n\t\t\t\t\t(c === 't' && (out[jj].v === '/' || out[jj].v === ' ' && out[jj+1] != null && out[jj+1].t == '?'))\n\t\t\t\t)) {\n\t\t\t\t\tout[i].v += out[jj].v;\n\t\t\t\t\tout[jj] = {v:\"\", t:\";\"}; ++jj;\n\t\t\t\t}\n\t\t\t\tnstr += out[i].v;\n\t\t\t\ti = jj-1; break;\n\t\t\tcase 'G': out[i].t = 't'; out[i].v = general_fmt(v,opts); break;\n\t\t}\n\t}\n\tvar vv = \"\", myv, ostr;\n\tif(nstr.length > 0) {\n\t\tif(nstr.charCodeAt(0) == 40) /* '(' */ {\n\t\t\tmyv = (v<0&&nstr.charCodeAt(0) === 45 ? -v : v);\n\t\t\tostr = write_num('n', nstr, myv);\n\t\t} else {\n\t\t\tmyv = (v<0 && flen > 1 ? -v : v);\n\t\t\tostr = write_num('n', nstr, myv);\n\t\t\tif(myv < 0 && out[0] && out[0].t == 't') {\n\t\t\t\tostr = ostr.substr(1);\n\t\t\t\tout[0].v = \"-\" + out[0].v;\n\t\t\t}\n\t\t}\n\t\tjj=ostr.length-1;\n\t\tvar decpt = out.length;\n\t\tfor(i=0; i < out.length; ++i) if(out[i] != null && out[i].t != 't' && out[i].v.indexOf(\".\") > -1) { decpt = i; break; }\n\t\tvar lasti=out.length;\n\t\tif(decpt === out.length && ostr.indexOf(\"E\") === -1) {\n\t\t\tfor(i=out.length-1; i>= 0;--i) {\n\t\t\t\tif(out[i] == null || 'n?'.indexOf(out[i].t) === -1) continue;\n\t\t\t\tif(jj>=out[i].v.length-1) { jj -= out[i].v.length; out[i].v = ostr.substr(jj+1, out[i].v.length); }\n\t\t\t\telse if(jj < 0) out[i].v = \"\";\n\t\t\t\telse { out[i].v = ostr.substr(0, jj+1); jj = -1; }\n\t\t\t\tout[i].t = 't';\n\t\t\t\tlasti = i;\n\t\t\t}\n\t\t\tif(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;\n\t\t}\n\t\telse if(decpt !== out.length && ostr.indexOf(\"E\") === -1) {\n\t\t\tjj = ostr.indexOf(\".\")-1;\n\t\t\tfor(i=decpt; i>= 0; --i) {\n\t\t\t\tif(out[i] == null || 'n?'.indexOf(out[i].t) === -1) continue;\n\t\t\t\tj=out[i].v.indexOf(\".\")>-1&&i===decpt?out[i].v.indexOf(\".\")-1:out[i].v.length-1;\n\t\t\t\tvv = out[i].v.substr(j+1);\n\t\t\t\tfor(; j>=0; --j) {\n\t\t\t\t\tif(jj>=0 && (out[i].v.charAt(j) === \"0\" || out[i].v.charAt(j) === \"#\")) vv = ostr.charAt(jj--) + vv;\n\t\t\t\t}\n\t\t\t\tout[i].v = vv;\n\t\t\t\tout[i].t = 't';\n\t\t\t\tlasti = i;\n\t\t\t}\n\t\t\tif(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;\n\t\t\tjj = ostr.indexOf(\".\")+1;\n\t\t\tfor(i=decpt; i<out.length; ++i) {\n\t\t\t\tif(out[i] == null || ('n?('.indexOf(out[i].t) === -1 && i !== decpt)) continue;\n\t\t\t\tj=out[i].v.indexOf(\".\")>-1&&i===decpt?out[i].v.indexOf(\".\")+1:0;\n\t\t\t\tvv = out[i].v.substr(0,j);\n\t\t\t\tfor(; j<out[i].v.length; ++j) {\n\t\t\t\t\tif(jj<ostr.length) vv += ostr.charAt(jj++);\n\t\t\t\t}\n\t\t\t\tout[i].v = vv;\n\t\t\t\tout[i].t = 't';\n\t\t\t\tlasti = i;\n\t\t\t}\n\t\t}\n\t}\n\tfor(i=0; i<out.length; ++i) if(out[i] != null && 'n?'.indexOf(out[i].t)>-1) {\n\t\tmyv = (flen >1 && v < 0 && i>0 && out[i-1].v === \"-\" ? -v:v);\n\t\tout[i].v = write_num(out[i].t, out[i].v, myv);\n\t\tout[i].t = 't';\n\t}\n\tvar retval = \"\";\n\tfor(i=0; i !== out.length; ++i) if(out[i] != null) retval += out[i].v;\n\treturn retval;\n}\nSSF._eval = eval_fmt;\nvar cfregex = /\\[[=<>]/;\nvar cfregex2 = /\\[(=|>[=]?|<[>=]?)(-?\\d+(?:\\.\\d*)?)\\]/;\nfunction chkcond(v, rr) {\n\tif(rr == null) return false;\n\tvar thresh = parseFloat(rr[2]);\n\tswitch(rr[1]) {\n\t\tcase \"=\":  if(v == thresh) return true; break;\n\t\tcase \">\":  if(v >  thresh) return true; break;\n\t\tcase \"<\":  if(v <  thresh) return true; break;\n\t\tcase \"<>\": if(v != thresh) return true; break;\n\t\tcase \">=\": if(v >= thresh) return true; break;\n\t\tcase \"<=\": if(v <= thresh) return true; break;\n\t}\n\treturn false;\n}\nfunction choose_fmt(f, v) {\n\tvar fmt = split_fmt(f);\n\tvar l = fmt.length, lat = fmt[l-1].indexOf(\"@\");\n\tif(l<4 && lat>-1) --l;\n\tif(fmt.length > 4) throw new Error(\"cannot find right format for |\" + fmt.join(\"|\") + \"|\");\n\tif(typeof v !== \"number\") return [4, fmt.length === 4 || lat>-1?fmt[fmt.length-1]:\"@\"];\n\tswitch(fmt.length) {\n\t\tcase 1: fmt = lat>-1 ? [\"General\", \"General\", \"General\", fmt[0]] : [fmt[0], fmt[0], fmt[0], \"@\"]; break;\n\t\tcase 2: fmt = lat>-1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], \"@\"]; break;\n\t\tcase 3: fmt = lat>-1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], \"@\"]; break;\n\t\tcase 4: break;\n\t}\n\tvar ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];\n\tif(fmt[0].indexOf(\"[\") === -1 && fmt[1].indexOf(\"[\") === -1) return [l, ff];\n\tif(fmt[0].match(cfregex) != null || fmt[1].match(cfregex) != null) {\n\t\tvar m1 = fmt[0].match(cfregex2);\n\t\tvar m2 = fmt[1].match(cfregex2);\n\t\treturn chkcond(v, m1) ? [l, fmt[0]] : chkcond(v, m2) ? [l, fmt[1]] : [l, fmt[m1 != null && m2 != null ? 2 : 1]];\n\t}\n\treturn [l, ff];\n}\nfunction format(fmt,v,o) {\n\tif(o == null) o = {};\n\tvar sfmt = \"\";\n\tswitch(typeof fmt) {\n\t\tcase \"string\":\n\t\t\tif(fmt == \"m/d/yy\" && o.dateNF) sfmt = o.dateNF;\n\t\t\telse sfmt = fmt;\n\t\t\tbreak;\n\t\tcase \"number\":\n\t\t\tif(fmt == 14 && o.dateNF) sfmt = o.dateNF;\n\t\t\telse sfmt = (o.table != null ? (o.table) : table_fmt)[fmt];\n\t\t\tbreak;\n\t}\n\tif(isgeneral(sfmt,0)) return general_fmt(v, o);\n\tif(v instanceof Date) v = datenum_local(v, o.date1904);\n\tvar f = choose_fmt(sfmt, v);\n\tif(isgeneral(f[1])) return general_fmt(v, o);\n\tif(v === true) v = \"TRUE\"; else if(v === false) v = \"FALSE\";\n\telse if(v === \"\" || v == null) return \"\";\n\treturn eval_fmt(f[1], v, o, f[0]);\n}\nfunction load_entry(fmt, idx) {\n\tif(typeof idx != 'number') {\n\t\tidx = +idx || -1;\nfor(var i = 0; i < 0x0188; ++i) {\nif(table_fmt[i] == undefined) { if(idx < 0) idx = i; continue; }\n\t\t\tif(table_fmt[i] == fmt) { idx = i; break; }\n\t\t}\nif(idx < 0) idx = 0x187;\n\t}\ntable_fmt[idx] = fmt;\n\treturn idx;\n}\nSSF.load = load_entry;\nSSF._table = table_fmt;\nSSF.get_table = function get_table() { return table_fmt; };\nSSF.load_table = function load_table(tbl) {\n\tfor(var i=0; i!=0x0188; ++i)\n\t\tif(tbl[i] !== undefined) load_entry(tbl[i], i);\n};\nSSF.init_table = init_table;\nSSF.format = format;\n};\nmake_ssf(SSF);\n/*global module */\nif(typeof module !== 'undefined' && typeof DO_NOT_EXPORT_SSF === 'undefined') module.exports = SSF;\n","import SSF from \"ssf\"\n\nimport { ModelDimension, ModelPivot, ModelMeasure, CellSeries, ColumnSeries, Row, Column, DataCell, HeaderCell } from './vis_primitives'\n\nconst tableModelCoreOptions = {\n  theme: {\n    section: \"Theme\",\n    type: \"string\",\n    display: \"select\",\n    label: \"Theme\",\n    values: [\n      { 'Traditional': 'traditional' },\n      { 'Looker': 'looker' },\n      { 'Contemporary': 'contemporary' },\n      { 'Use custom theme': 'custom'}\n    ],\n    default: \"traditional\",\n    order: 1,\n  },\n  customTheme: {\n    section: \"Theme\",\n    type: \"string\",\n    label: \"Load custom CSS from:\",\n    default: \"\",\n    order: 2,\n  },\n  layout: {\n    section: \"Theme\",\n    type: \"string\",\n    display: \"select\",\n    label: \"Layout\",\n    values: [\n      { 'Even': 'fixed' },\n      { 'Auto': 'auto' }\n    ],\n    default: \"fixed\",\n    order: 3,\n  },\n  minWidthForIndexColumns: {\n    section: 'Theme',\n    type: 'boolean',\n    label: \"Automatic column width on index\",\n    default: true,\n    order: 3.5\n  },\n  headerFontSize: {\n    section: 'Theme',\n    type: 'number',\n    display_size: 'half',\n    label: 'Header Size',\n    default: 12,\n    order: 4,\n  },\n  bodyFontSize: {\n    section: 'Theme',\n    type: 'number',\n    display_size: 'half',\n    label: 'Body Size',\n    default: 12,\n    order: 5,\n  },\n  showTooltip: {\n    section: 'Theme',\n    type: 'boolean',\n    display_size: 'half',\n    label: \"Show tooltip\",\n    default: true,\n    order: 6\n  },\n  showHighlight: {\n    section: 'Theme',\n    type: 'boolean',\n    display_size: 'half',\n    label: \"Show highlight\",\n    default: true,\n    order: 7\n  },\n\n  columnOrder: {},\n  \n  rowSubtotals: {\n    section: \"Table\",\n    type: \"boolean\",\n    label: \"Row Subtotals\",\n    display_size: 'half',\n    default: false,\n    order: 1,\n  },\n  colSubtotals: {\n    section: \"Table\",\n    type: \"boolean\",\n    label: \"Col Subtotals\",\n    display_size: 'half',\n    default: false,\n    order: 2,\n  },\n  spanRows: {\n    section: \"Table\",\n    type: \"boolean\",\n    label: \"Merge Dims\",\n    display_size: 'half',\n    default: true,\n    order: 3,\n  },\n  spanCols: {\n    section: \"Table\",\n    type: \"boolean\",\n    label: \"Merge Headers\",\n    display_size: 'half',\n    default: true,\n    order: 4,\n  },\n  calculateOthers: {\n    section: \"Table\",\n    type: \"boolean\",\n    label: \"Calculate Others Row\",\n    default: true,\n    order: 4.5\n  },\n  sortColumnsBy: {\n    section: \"Table\",\n    type: \"string\",\n    display: \"select\",\n    label: \"Sort Columns By\",\n    values: [\n      { 'Pivots': 'pivots' },\n      { 'Measures': 'measures' }\n    ],\n    default: \"pivots\",\n    order: 6,\n  },\n  useViewName: {\n    section: \"Table\",\n    type: \"boolean\",\n    label: \"Include View Name\",\n    default: false,\n    order: 7,\n  },\n  useHeadings: {\n    section: \"Table\",\n    type: \"boolean\",\n    label: \"Use Headings\",\n    default: false,\n    order: 8,\n  },\n  useShortName: {\n    section: \"Table\",\n    type: \"boolean\",\n    label: \"Use Short Name (from model tags)\",\n    default: false,\n    order: 9,\n  },\n  useUnit: {\n    section: \"Table\",\n    type: \"boolean\",\n    label: \"Use Unit (when reporting in 000s)\",\n    default: false,\n    order: 9.5,\n  },\n  groupVarianceColumns: {\n    section: \"Table\",\n    type: \"boolean\",\n    label: \"Group Variance Columns\",\n    default: false,\n    order: 10,\n  },\n  varianceForLastPivotColumnOnly: {\n    section: \"Table\",\n    type: \"boolean\",\n    label: \"Show Variance columns for last pivot column only\",\n    default: false,\n    order: 10,\n  },\n  genericLabelForSubtotals: {\n    section: 'Table',\n    type: 'boolean',\n    label: \"Label all subtotal rows as 'Subtotal'\",\n    default: false,\n    order: 11\n  },\n  indexColumn: {\n    section: \"Dimensions\",\n    type: \"boolean\",\n    label: \"Use Last Field Only\",\n    default: false,\n    order: 0,\n  },\n  transposeTable: {\n    section: \"Table\",\n    type: \"boolean\",\n    label: \"Transpose Table\",\n    default: false,\n    order: 100,\n  },\n}\n/**\n * Represents an \"enriched data object\" with additional methods and properties for data vis\n * Takes the data, config and queryResponse objects as inputs to the constructor\n */\nclass VisPluginTableModel {\n  /**\n   * Build the LookerData object\n   * @constructor\n   * \n   * - TODO: add new column series\n   * - TODO: Get table column groups\n   * \n   * @param {*} lookerData \n   * @param {*} queryResponse \n   * @param {*} config \n   */\n  constructor(lookerData, queryResponse, config) {\n    this.visId = 'report_table'\n    this.config = config\n\n    this.headers = []\n    this.dimensions = []\n    this.measures = []\n    this.columns = []\n    this.data = []\n    this.subtotals_data = {}\n\n    this.transposed_headers = []\n    this.transposed_columns = []\n    this.transposed_data = []\n\n    this.pivot_fields = []\n    this.pivot_values = typeof queryResponse.pivots !== 'undefined' ? queryResponse.pivots : []\n    this.variances = []\n    this.column_series = []\n\n    this.firstVisibleDimension = ''\n\n    this.useIndexColumn = config.indexColumn || false\n    this.useHeadings = config.useHeadings || false\n    this.useShortName = config.useShortName || false\n    this.useViewName = config.useViewName || false\n    this.addRowSubtotals = config.rowSubtotals || false\n    this.addSubtotalDepth = parseInt(config.subtotalDepth)|| this.dimensions.length - 1\n    this.addColSubtotals = config.colSubtotals || false\n    this.spanRows = false || config.spanRows\n    this.spanCols = false || config.spanCols\n    this.sortColsBy = config.sortColumnsBy || 'pivots' // matches to Column methods: pivots(), measures)\n    this.fieldLevel = 0 // set in addPivotsAndHeaders()\n    this.groupVarianceColumns = config.groupVarianceColumns || false\n    this.varianceForLastPivotColumnOnly = config.varianceForLastPivotColumnOnly || false\n    this.minWidthForIndexColumns = config.minWidthForIndexColumns || false\n    this.showTooltip = config.showTooltip || false\n    this.showHighlight = config.showHighlight || false\n    this.genericLabelForSubtotals = config.genericLabelForSubtotals || false\n\n    this.hasTotals = typeof queryResponse.totals_data !== 'undefined' ? true : false\n    this.calculateOthers = typeof queryResponse.truncated !== 'undefined' ? queryResponse.truncated && config.calculateOthers : false \n    this.hasSubtotals = typeof queryResponse.subtotals_data !== 'undefined' ? true : false\n    this.hasRowTotals = queryResponse.has_row_totals || false\n    this.hasPivots = typeof queryResponse.pivots !== 'undefined' ? true : false\n    this.hasSupers = typeof queryResponse.fields.supermeasure_like !== 'undefined' ? Boolean(queryResponse.fields.supermeasure_like.length) : false\n\n    this.transposeTable = config.transposeTable || false\n\n    var col_idx = 0\n    this.addPivotsAndHeaders(queryResponse)\n    this.addDimensions(queryResponse, col_idx)\n    this.addMeasures(queryResponse, col_idx)\n\n    this.checkVarianceCalculations()\n    if (this.useIndexColumn) { this.addIndexColumn(queryResponse) }\n    if (this.hasSubtotals) { this.checkSubtotalsData(queryResponse) }\n\n    this.addRows(lookerData)\n    this.addColumnSeries()\n\n    if (this.hasTotals) { this.buildTotals(queryResponse) }\n    if (this.spanRows) { this.setRowSpans() }\n    if (this.addRowSubtotals) { this.addSubTotals() }\n    if (this.addColSubtotals && this.pivot_fields.length === 2) { this.addColumnSubTotals() }\n    if (this.variances) { this.addVarianceColumns() }\n\n    // this.addColumnSeries()    // TODO: add column series for generated columns (eg column subtotals)\n    this.sortColumns()\n    this.columns.forEach(column => column.setHeaderCellLabels())\n    if (this.spanCols) { this.setColSpans() }\n    this.applyFormatting()\n\n    if (this.transposeTable) { \n      this.transposeDimensionsIntoHeaders()\n      this.transposeRowsIntoColumns() \n      this.transposeColumnsIntoRows()\n    }\n\n    this.validateConfig()\n    this.getTableColumnGroups() \n  }\n\n  static getCoreConfigOptions() {\n    return tableModelCoreOptions\n  }\n\n  /**\n   * Hook to be called by a Looker custom vis, for example:\n   *    this.trigger('registerOptions', VisPluginTableModel.getConfigOptions())\n   * \n   * Returns a new config object, combining the core options with dynamic options based on available dimensions and measures\n   */\n  getConfigOptions() {\n    var newOptions = tableModelCoreOptions\n\n    var subtotal_options = []\n    this.dimensions.forEach((dimension, i) => {\n      newOptions['label|' + dimension.name] = {\n        section: 'Dimensions',\n        type: 'string',\n        label: dimension.label,\n        default: dimension.label,\n        order: i * 10 + 1,\n      }\n\n      newOptions['heading|' + dimension.name] = {\n        section: 'Dimensions',\n        type: 'string',\n        label: 'Heading',\n        default: '',\n        order: i * 10 + 2,\n      }\n\n      newOptions['hide|' + dimension.name] = {\n        section: 'Dimensions',\n        type: 'boolean',\n        label: 'Hide',\n        display_size: 'third',\n        default: false,\n        order: i * 10 + 3,\n      }\n\n      if (i < this.dimensions.length - 1) {\n        var subtotal_option = {}\n        subtotal_option[dimension.label] = (i + 1).toString()\n        subtotal_options.push(subtotal_option)\n      }\n    })\n\n    newOptions['subtotalDepth'] = {\n      section: \"Table\",\n      type: \"string\",\n      label: \"Sub Total Depth\",\n      display: 'select',\n      values: subtotal_options,\n      default: \"1\",\n      order: 5,\n    }\n\n    this.measures.forEach((measure, i) => {\n      newOptions['label|' + measure.name] = {\n        section: 'Measures',\n        type: 'string',\n        label: measure.label,\n        default: measure.label,\n        order: 100 + i * 10 + 1,\n      }\n\n      newOptions['heading|' + measure.name] = {\n        section: 'Measures',\n        type: 'string',\n        label: 'Heading for ' + measure.label,\n        default: '',\n        order: 100 + i * 10 + 2,\n      }\n\n      newOptions['style|' + measure.name] = {\n        section: 'Measures',\n        type: 'string',\n        label: 'Style',\n        display: 'select',\n        display_size: 'third',\n        values: [\n          {'Normal': 'normal'},\n          {'Black/Red': 'black_red'},\n          {'Subtotal': 'subtotal'},\n          {'Hidden': 'hide'}\n        ],\n        default: 'normal',\n        order: 100 + i * 10 + 3\n      }\n\n      newOptions['reportIn|' + measure.name] = {\n        section: 'Measures',\n        type: 'string',\n        label: 'Report In',\n        display: 'select',\n        display_size: 'third',\n        values: [\n          {'Absolute Figures': '1'},\n          {'Thousands': '1000'},\n          {'Millions': '1000000'},\n          {'Billions': '1000000000'}\n        ],\n        default: '1',\n        order: 100 + i * 10 + 3.5\n      }\n\n      newOptions['unit|' + measure.name] = {\n        section: 'Measures',\n        type: 'string',\n        label: 'Unit',\n        // display: 'select',\n        display_size: 'third',\n        default: '',\n        order: 100 + i * 10 + 3.7\n      }\n\n      var comparisonOptions = []\n      \n      if (measure.can_pivot) {\n        var pivotComparisons = []\n        this.pivot_fields.forEach((pivot_field, p) => {\n          if (this.pivot_fields.length === 1 || p === 1 || this.config.colSubtotals ) {\n            var option = {}\n            option['By ' + pivot_field.label] = pivot_field.name\n            pivotComparisons.push(option)\n          }\n        })\n        comparisonOptions = comparisonOptions.concat(pivotComparisons)\n      }\n\n      // measures, row totals and supermeasures\n      this.measures.forEach((comparisonMeasure, j) => {\n        var includeMeasure = measure.can_pivot === comparisonMeasure.can_pivot\n                              || \n                            this.hasRowTotals && !comparisonMeasure.is_table_calculation         \n        if (i != j && includeMeasure) {\n          var option = {}\n          option['Vs. ' + comparisonMeasure.label] = comparisonMeasure.name\n          comparisonOptions.push(option)\n        }\n      })\n      comparisonOptions.unshift({ '(none)': 'no_variance'})\n\n      newOptions['comparison|' + measure.name] = {\n        section: 'Measures',\n        type: 'string',\n        label: 'Comparison',\n        display: 'select',\n        values: comparisonOptions,\n        default: 'no_variance',\n        order: 100 + i * 10 + 5\n      }\n\n      newOptions['switch|' + measure.name] = {\n        section: 'Measures',\n        type: 'boolean',\n        label: 'Switch',\n        display_size: 'third',\n        default: false,\n        order: 100 + i * 10 + 6,\n      }\n\n      newOptions['var_num|' + measure.name] = {\n        section: 'Measures',\n        type: 'boolean',\n        label: 'Var #',\n        display_size: 'third',\n        default: true,\n        order: 100 + i * 10 + 7,\n      }\n\n      newOptions['var_pct|' + measure.name] = {\n        section: 'Measures',\n        type: 'boolean',\n        label: 'Var %',\n        display_size: 'third',\n        default: false,\n        order: 100 + i * 10 + 8,\n      }\n\n      newOptions['var_num_title|' + measure.name] = {\n        section: 'Measures',\n        type: 'string',\n        label: 'Var %',\n        display_size: 'third',\n        default: false,\n        order: 100 + i * 10 + 9,\n      }\n\n      newOptions['var_num_format|' + measure.name] = {\n        section: 'Measures',\n        type: 'string',\n        label: 'Var %',\n        display_size: 'third',\n        default: false,\n        order: 100 + i * 10 + 9.5,\n      }\n\n      newOptions['var_pct_title|' + measure.name] = {\n        section: 'Measures',\n        type: 'string',\n        label: 'Var %',\n        display_size: 'third',\n        default: false,\n        order: 100 + i * 10 + 10,\n      }\n      newOptions['var_pct_format|' + measure.name] = {\n        section: 'Measures',\n        type: 'string',\n        label: 'Var %',\n        display_size: 'third',\n        default: false,\n        order: 100 + i * 10 + 10.5,\n      }\n\n\n    })\n    return newOptions\n  }\n\n  /**\n   * - this.pivot_fields\n   * - this.headers\n   * @param {*} queryResponse \n   */\n  addPivotsAndHeaders(queryResponse) {\n    queryResponse.fields.pivots.forEach((pivot, i) => {\n      var pivot_field = new ModelPivot({ vis: this, queryResponseField: pivot })\n      this.pivot_fields.push(pivot_field)\n      this.headers.push({ type: 'pivot' + i, modelField: pivot_field })\n    })\n\n    var measureHeaders = this.useHeadings \n      ? [{ type: 'heading', modelField: { label: '(will be replaced by header for column)s' } }] \n      : []\n    \n    measureHeaders.push({ type: 'field', modelField: { label: '(will be replaced by field for column)' } })\n\n    if (this.sortColsBy === 'pivots') {\n      this.headers.push(...measureHeaders)\n    } else {\n      this.headers.unshift(...measureHeaders)\n    }\n\n    for (var i = 0; i < this.headers.length; i++) {\n      if (!this.headers[i] === 'field') {\n        this.fieldLevel = i\n        break\n      }\n    }\n  }\n\n  /**\n   * - this.dimensions\n   * - this.columns\n   * @param {*} queryResponse \n   * @param {*} col_idx \n   */\n  addDimensions(queryResponse, col_idx) {\n    queryResponse.fields.dimension_like.forEach(dimension => {\n      var newDimension = new ModelDimension({\n        vis: this,\n        queryResponseField: dimension\n      })\n      newDimension.hide = this.useIndexColumn ? true : newDimension.hide\n      this.dimensions.push(newDimension)\n\n      var column = new Column(newDimension.name, this, newDimension) \n      column.idx = col_idx\n      column.sort.push(0)\n      this.headers.forEach(header => {\n        switch (header.type) {\n          case 'pivot0':\n          case 'pivot1':\n            var pivotField = new ModelPivot({ vis: this, queryResponseField: header.modelField })\n            var headerCell = new HeaderCell({ column: column, type: header.type, modelField: pivotField })\n            headerCell.label = '' // TODO: Decide how (if) it makes sense to add pivot labels at top of dimension columns\n            column.levels.push(headerCell)\n            column.sort.push(0)\n            break\n          case 'heading':\n            column.levels.push(new HeaderCell({ column: column, type: 'heading', modelField: newDimension }))\n            break\n          case 'field':\n            column.levels.push(new HeaderCell({ column: column, type: 'field', modelField: newDimension }))\n            column.sort.push(col_idx)\n            break\n        }\n      })\n\n      this.columns.push(column)\n      col_idx += 10\n    })\n\n    for (var i = 0; i < this.dimensions.length; i++) {\n      var dimension = this.dimensions[i]\n      if (!dimension.hide) {\n        this.firstVisibleDimension = dimension.name\n        break\n      }\n    }\n  }\n\n  /**\n   * Registers measures with the VisPluginTableModel\n   * - this.measures\n   * - this.columns\n   * \n   * Uses this.applyVisToolsTags() to enrich column information\n   * \n   * @param {*} queryResponse \n   * @param {*} col_idx \n   */\n  addMeasures(queryResponse, col_idx) {\n    // add measures, list of ids\n    queryResponse.fields.measure_like.forEach(measure => {\n      var newMeasure = new ModelMeasure({\n        vis: this,\n        queryResponseField: measure,\n        can_pivot: true\n      })\n\n      var reportInSetting = this.config['reportIn|' + measure.name]\n      var unitSetting = this.config['unit|' + measure.name]\n      if (typeof reportInSetting !== 'undefined'  && reportInSetting !== '1') {\n        newMeasure.value_format = '#,##0'\n        if (typeof unitSetting !== 'undefined' && unitSetting !== '') {\n           newMeasure.unit = unitSetting\n        }\n      }\n      this.measures.push(newMeasure) \n    })\n    \n    // add measures, list of full objects\n    if (this.hasPivots) {\n      this.pivot_values.forEach(pivot_value => {\n        var isRowTotal = pivot_value.key === '$$$_row_total_$$$'\n        this.measures.forEach((measure, m) => {\n          // for pivoted measures, skip table calcs for row totals \n          // if user wants a row total of a table calc, it must be defined as another table calc (in which case, it will be a supermeasure)\n          var include_measure = !isRowTotal || ( isRowTotal && !measure.is_table_calculation )\n          \n          if (include_measure) {\n            var column = new Column([pivot_value.key, measure.name].join('.'), this, measure)\n            column.pivoted = isRowTotal ? false : true\n            column.isRowTotal = isRowTotal\n            column.pivot_key = pivot_value.key\n            column.idx = col_idx\n            column.sort.push(isRowTotal ? 2 : 1)\n\n            var level_sort_values = []\n            this.headers.forEach(header => {\n              switch (header.type) {\n                case 'pivot0':\n                case 'pivot1':\n                  var label = isRowTotal ? '' : pivot_value.data[header.modelField.name]\n                  if (isRowTotal && header.type.startsWith('pivot') && header.type === 'pivot' + (this.pivot_fields.length - 1)) {\n                    label = 'Row Total'\n                  }\n                  column.levels.push(new HeaderCell({ \n                    column: column, \n                    type: header.type, \n                    modelField: { label: label },\n                    pivotData: pivot_value\n                  }))\n                  level_sort_values.push(pivot_value.sort_values[header.modelField.name])\n                  if (column.pivoted) {\n                    column.sort.push(pivot_value.sort_values[header.modelField.name])\n                  } else {\n                    column.sort.push(0)\n                  }\n                  break\n\n                case 'heading':\n                  column.levels.push(new HeaderCell({ column: column, type: 'heading', modelField: measure}))\n                  break\n\n                case 'field':\n                  column.levels.push(new HeaderCell({ column: column, type: 'field', modelField: measure}))\n                  column.sort.push(m)\n                  break;\n              }\n            })\n\n            this.columns.push(column)\n            col_idx += 10\n          }\n        })\n      })\n    } else {\n      // noticeably simpler for flat tables!\n      this.measures.forEach(measure => {\n        var column = new Column(measure.name, this, measure)\n        column.sort.push(1)\n        column.idx = col_idx\n\n        try {\n          if (typeof this.config.columnOrder[column.id] !== 'undefined') {\n            column.pos = this.config.columnOrder[column.id]\n          } else {\n            column.pos = col_idx\n          }\n        }\n        catch {\n          column.pos = col_idx\n        }\n\n        this.headers.forEach(header => {\n          switch (header.type) {\n            case 'heading':\n              column.levels.push(new HeaderCell({ column: column, type: 'heading', modelField: measure}))\n              break\n\n            case 'field':\n              column.levels.push(new HeaderCell({ column: column, type: 'field', modelField: measure}))\n              column.sort.push(column.pos)\n              break;\n          }\n        })\n\n        this.columns.push(column)\n        col_idx += 10\n      })\n    }\n    \n    // add supermeasures, if present\n    if (typeof queryResponse.fields.supermeasure_like !== 'undefined') {\n      queryResponse.fields.supermeasure_like.forEach(supermeasure => {\n        var meas = new ModelMeasure({\n          vis: this,\n          queryResponseField: supermeasure,\n          can_pivot: false,\n        })\n        var reportInSetting = this.config['reportIn|' + supermeasure.name]\n        var unitSetting = this.config['unit|' + supermeasure.name]\n        if (typeof reportInSetting !== 'undefined'  && reportInSetting !== '1') {\n          meas.value_format = '#,##0'\n          if (typeof unitSetting !== 'undefined' && unitSetting !== '') {\n            meas.unit = unitSetting\n          }\n        }\n        this.measures.push(meas) \n\n        var column = new Column(meas.name, this, meas)\n        column.sort.push(2)\n        this.headers.forEach(header => {\n          switch (header.type) {\n            case 'pivot0':\n            case 'pivot1':\n              column.levels.push(new HeaderCell({ column: column, type: header.type, modelField: { label: '' } }))\n              column.sort.push(1)\n              break\n            case 'heading':\n              column.levels.push(new HeaderCell({ column: column, type: 'heading', modelField: meas }))\n              break\n            case 'field':\n              column.levels.push(new HeaderCell({ column: column, type: 'field', modelField: meas }))\n              column.sort.push(col_idx)\n              break\n          }\n        })\n        column.idx = col_idx\n        column.super = true\n\n        this.columns.push(column)\n        col_idx += 10\n      })\n    }\n  }\n\n   /**\n   * Update the VisPluginTableModel instace\n   * - this.variances\n   * \n   *  option is either 'no_variance' or a measure.name\n   */\n  checkVarianceCalculations() {\n    Object.keys(this.config).forEach(option => {\n      if (option.startsWith('comparison')) {\n        var baseline = option.split('|')[1]\n        var comparison = this.config[option]\n\n        var baseline_in_measures = false\n        this.measures.forEach(measure => {\n          if (baseline === measure.name) {\n            baseline_in_measures = true\n          }\n        })\n\n        var comparison_available = false\n\n        var comparison_options = [...this.measures.map(measure => measure.name), ...this.pivot_fields.map(pivot_field => pivot_field.name)]\n        comparison_options.forEach(comparitor => {\n          if (comparison === comparitor) {\n            comparison_available = true\n          }\n        })\n\n        if (baseline_in_measures && comparison_available) {\n          if (this.pivot_fields.map(pivot_field => pivot_field.name).includes(this.config[option])) {\n            var type = 'by_pivot'\n          } else {\n            var type = this.config[option] === 'no_variance' ? 'no_variance' : 'vs_measure'\n          }\n  \n          if (typeof this.config['switch|' + baseline] !== 'undefined') {\n            if (this.config['switch|' + baseline]) {\n              var reverse = true\n            } else {\n              var reverse = false\n            }\n          }\n  \n          this.variances.push({\n            baseline: baseline,\n            comparison: this.config[option],\n            type: type,\n            reverse: reverse\n          })\n        } else if (baseline_in_measures) {\n          this.config[option] = 'no_variance'\n        } else {\n          delete this.config[option]\n        }\n      }\n    })\n  }\n\n  /**\n   * Creates the index column, a \"for display only\" column when the set of dimensions is reduced to\n   * a single column for reporting purposes.\n   */\n  addIndexColumn() {\n    var dimension = this.dimensions[this.dimensions.length - 1]\n    var dim_config_setting = this.config['hide|' + dimension.name]\n    var column = new Column('$$$_index_$$$', this, dimension)\n    column.sort.push(-1)\n    column.hide = dim_config_setting === true ? dim_config_setting : false\n\n    this.headers.forEach(header => {\n      switch (header.type) {\n        case 'pivot0':\n        case 'pivot1':\n          var pivotField = new ModelPivot({ vis: this, queryResponseField: header.modelField })\n          var headerCell = new HeaderCell({ column: column, type: header.type, modelField: pivotField })\n          headerCell.label = ''  // TODO: Decide how (if) it makes sense to add pivot labels at top of dimension columns\n          column.levels.push(headerCell)\n          column.sort.push(0)\n          break\n        case 'heading':\n          column.levels.push(new HeaderCell({ column: column, type: 'heading', modelField: dimension }))\n          break\n        case 'field':\n          column.levels.push(new HeaderCell({ column: column, type: 'field', modelField: dimension }))\n          column.sort.push(0)\n          break\n      }\n    })\n    \n    this.columns.push(column)\n  }\n\n  /**\n   * this.subtotals_data\n   * @param {*} queryResponse \n   */\n  checkSubtotalsData(queryResponse) {\n    if (typeof queryResponse.subtotals_data[this.addSubtotalDepth] !== 'undefined') {\n      queryResponse.subtotals_data[this.addSubtotalDepth].forEach(lookerSubtotal => {\n        var visSubtotal = new Row('subtotal')\n\n        visSubtotal['$$$__grouping__$$$'] = lookerSubtotal['$$$__grouping__$$$']\n        var groups = ['Subtotal']\n        visSubtotal['$$$__grouping__$$$'].forEach(group => {\n          groups.push(lookerSubtotal[group].value)\n        })\n        visSubtotal.id = groups.join('|')\n\n        this.columns.forEach(column => {\n          visSubtotal.data[column.id] = (column.pivoted || column.isRowTotal) ? lookerSubtotal[column.modelField.name][column.pivot_key] : lookerSubtotal[column.id]\n          var cell = visSubtotal.data[column.id]\n\n          if (typeof cell !== 'undefined') {\n            if (typeof cell.cell_style === 'undefined') {\n              cell.cell_style = ['total', 'subtotal']\n            } else {\n              cell.cell_style = cell.cell_style.concat(['total', 'subtotal'])\n            }\n            if (typeof column.modelField.style !== 'undefined') {\n              cell.cell_style = cell.cell_style.concat(column.modelField.style)\n            }\n            if (cell.value === null) {\n              cell.rendered = ''\n            }\n\n            var reportInSetting = this.config['reportIn|' + column.modelField.name]\n            if (typeof reportInSetting !== 'undefined' && reportInSetting !== '1') {\n              var unit = this.config.useUnit && column.modelField.unit !== '#' ? column.modelField.unit : ''\n              cell.html = null\n              cell.value = Math.round(cell.value / parseInt(reportInSetting))\n              cell.rendered = column.modelField.value_format === '' ? cell.value.toString() : unit + SSF.format(column.modelField.value_format, cell.value)\n            }\n          }            \n        })\n        this.subtotals_data[visSubtotal.id] = visSubtotal\n      })\n    }\n  }\n\n  /**\n   * Populates this.data with Rows of data\n   * @param {*} lookerData \n   */\n  addRows(lookerData) {\n    lookerData.forEach((lookerRow, i) => {\n      var row = new Row('line_item')\n      row.id = this.dimensions.map(dimension => lookerRow[dimension.name].value).join('|')\n\n      this.columns.forEach(column => {\n        var cellValue = (column.pivoted || column.isRowTotal)? lookerRow[column.modelField.name][column.pivot_key] : lookerRow[column.id]\n        var cell = new DataCell({ \n          ...cellValue, \n          ...{ \n            cell_style: [column.modelField.type], \n            colid: column.id, \n            rowid: row.id } \n        })\n\n        if (column.modelField.is_numeric) {\n          cell.cell_style.push('numeric')\n          cell.align = 'right'\n        } else {\n          cell.cell_style.push('nonNumeric')\n          cell.align = 'left'\n        }\n\n        if (typeof column.modelField.style !== 'undefined') {\n          cell.cell_style = cell.cell_style.concat(column.modelField.style)\n        }\n\n        var reportInSetting = this.config['reportIn|' + column.modelField.name]\n        if (typeof reportInSetting !== 'undefined'  && reportInSetting !== '1') {\n          var unit = this.config.useUnit && column.modelField.unit !== '#'  ? column.modelField.unit : ''\n          cell.html = null\n          cell.value = Math.round(cell.value / parseInt(reportInSetting))\n          cell.rendered = column.modelField.value_format === '' ? cell.value.toString() : unit + SSF.format(column.modelField.value_format, cell.value)\n        }\n\n        if (column.modelField.is_turtle) {\n          var cell_series = new CellSeries({\n            column: column,\n            row: row,\n            sort_value: cell.sort_value,\n            series: {\n              keys: row.data[column.id]._parsed.keys,\n              values: row.data[column.id]._parsed.values\n            }\n          })\n          cell.value = cell_series\n          cell.rendered = cell_series.toString()\n        }\n\n        row.data[column.id] = cell\n      })\n\n      if (this.useIndexColumn) {\n        var last_dim = this.dimensions[this.dimensions.length - 1].name\n        var sourceCell = row.data[last_dim]\n\n        row.data['$$$_index_$$$'] = new DataCell({\n          value: sourceCell.value,\n          rendered: sourceCell.rendered,\n          html: sourceCell.html,\n          cell_style: ['singleIndex', 'dimension'],\n          align: this.dimensions[this.dimensions.length - 1].is_numeric ? 'right' : 'left',\n          colid: '$$$_index_$$$',\n          rowid: sourceCell.rowid\n        })\n      }\n\n      row.sort = [0, 0, i]\n      this.data.push(row)\n    })\n  }\n\n  /**\n   * Generate data series to support transposition\n   */\n  addColumnSeries() {\n    this.columns.forEach(column => {\n      var keys = []\n      var values = []\n      var types = []\n\n      this.data.forEach(row => {\n        keys.push(row.id)\n        values.push(row.data[column.id].value)\n        types.push(row.type)\n      })\n\n      var new_series = new ColumnSeries({\n        column: column,\n        is_numeric: column.modelField.is_numeric,\n        series: {\n          keys: keys,\n          values: values,\n          types: types\n        }\n      })\n      \n      column.series = new_series\n      this.column_series.push(new_series)\n    })\n  }\n\n  buildTotals(queryResponse) {\n    var totals_ = queryResponse.totals_data\n    var totalsRow = new Row('total')\n\n    this.columns.forEach(column => {\n      totalsRow.id = 'Total'\n\n      if (column.modelField.type === 'dimension') {\n        if ([this.firstVisibleDimension, '$$$_index_$$$'].includes(column.id)) {\n          var rowspan = 1\n          var colspan = this.useIndexColumn ? 1 : this.dimensions.filter(d => !d.hide).length\n        } else {\n          var rowspan = -1\n          var colspan = -1\n        }\n        totalsRow.data[column.id] = new DataCell({ \n          value: '', \n          cell_style: ['total', 'dimension'],\n          rowspan: rowspan, \n          colspan: colspan,\n          colid: column.id,\n          align: column.modelField.is_numeric ? 'right' : 'left',\n          rowid: 'Total' \n        })\n      } else {\n        var rowspan = 1\n        var colspan = 1\n      }\n      \n      \n      if (column.modelField.type === 'measure') {\n        var cell_style = column.modelField.is_numeric ? ['total', 'numeric', 'measure'] : ['total', 'nonNumeric', 'measure']\n        var cellValue = (column.pivoted || column.isRowTotal) ? totals_[column.modelField.name][column.pivot_key] : totals_[column.id]\n\n        cellValue = new DataCell({ \n          ...cellValue, \n          ...{ \n            cell_style: cell_style,\n            rowspan: rowspan, \n            colspan: colspan, \n            colid: column.id, \n            align: column.modelField.is_numeric ? 'right' : 'left',\n            rowid: 'Total'} \n        })\n\n        if (typeof cellValue.rendered === 'undefined' && typeof cellValue.html !== 'undefined' ) { // totals data may include html but not rendered value\n          cellValue.rendered = this.getRenderedFromHtml(cellValue)\n        }\n\n        var reportInSetting = this.config['reportIn|' + column.modelField.name]\n        if (typeof reportInSetting !== 'undefined'  && reportInSetting !== '1') {\n          var unit = this.config.useUnit && column.modelField.unit !== '#'  ? column.modelField.unit : ''\n          cellValue.html = undefined\n          cellValue.value = Math.round(cellValue.value / parseInt(reportInSetting))\n          cellValue.rendered = column.modelField.value_format === '' ? cellValue.value.toString() : unit + SSF.format(column.modelField.value_format, cellValue.value)\n        }\n        \n        totalsRow.data[column.id] = cellValue\n        if (typeof totalsRow.data[column.id].links !== 'undefined') {\n          totalsRow.data[column.id].links.forEach(link => {\n            link.type = \"measure_default\"\n          })\n        }       \n      }\n    })\n\n    if (this.useIndexColumn) {\n      totalsRow.data['$$$_index_$$$'].value = 'TOTAL'\n      totalsRow.data['$$$_index_$$$'].align = 'left'\n      totalsRow.data['$$$_index_$$$'].colspan = this.dimensions.filter(d => !d.hide).length\n    } else {\n      if (this.firstVisibleDimension) {\n        totalsRow.data[this.firstVisibleDimension].value = 'TOTAL'\n        totalsRow.data[this.firstVisibleDimension].align = 'left'\n      }\n    }\n    totalsRow.sort = [1, 0, 0]\n    this.data.push(totalsRow)\n\n    // Including an Others row: note the huge assumption in calculating a very simple average!\n    // This will prevent a data gap distracting users, and may indicate whether the Others data\n    // is \"higher or lower\" than the top x items. But it is not an accurate number.\n    if (this.calculateOthers) {\n      var othersRow = new Row('line_item')\n      othersRow.id = 'Others'\n      this.columns.forEach(column => {\n        var othersValue = null\n        var othersStyle = column.modelField.is_numeric ? ['numeric'] : ['nonNumeric']\n        var totalValue = totalsRow.data[column.id]\n        \n        if (column.modelField.type === 'measure') {\n          if (othersValue = ['sum', 'count'].includes(column.modelField.calculation_type)) {\n            othersValue = totalValue.value - column.series.series.sum\n            othersStyle.push('measure')\n          } else {\n            othersValue = (totalValue.value + column.series.series.avg) / 2\n            othersStyle = othersStyle.concat(['estimate', 'measure'])\n            if (['count', 'count_distinct'].includes(column.modelField.calculation_type)) {\n              othersValue = Math.round(othersValue)\n            }\n          }\n        } else {\n          othersStyle.push('dimension')\n        }\n\n        if (othersValue) {\n          var formatted_value = column.modelField.value_format === '' \n                ? othersValue.toString() \n                : SSF.format(column.modelField.value_format, othersValue)\n          othersRow.data[column.id] = new DataCell({ \n            value: othersValue, \n            rendered: formatted_value, \n            cell_style: othersStyle,\n            align: column.modelField.is_numeric ? 'right' : 'left',\n            colid: column.id,\n            rowid: 'Others'\n          })\n        } else {\n          othersRow.data[column.id] = new DataCell({ \n            rendered: '',\n            cell_style: othersStyle, \n            colid: column.id, \n            rowid: 'Others'\n          })\n        }\n      })\n\n      if (this.useIndexColumn) {\n        othersRow.data['$$$_index_$$$'].value = 'Others'\n        othersRow.data['$$$_index_$$$'].rendered = 'Others'\n        othersRow.data['$$$_index_$$$'].align = 'left'\n        othersRow.data['$$$_index_$$$'].cell_style.push('singleIndex')\n      } else {\n        if (this.firstVisibleDimension) {\n          othersRow.data[this.firstVisibleDimension].value = 'Others'\n          othersRow.data[this.firstVisibleDimension].rendered = 'Others'\n          othersRow.data[this.firstVisibleDimension].align = 'left'\n        }\n      }\n      othersRow.sort = [1, -1, -1] \n      this.data.push(othersRow)\n    }\n    \n    this.sortData()\n  }\n\n  /**\n   * 1. Build list of leaves\n   * 2. Build list of tiers (and initialise span_tracker)\n   * 3. Backwards <--- leaves\n   *    4. Check for resets (n/a for colspans)\n   *    5. Forwards ---> tiers\n   *        6. Match: mark invisible (span_value = -1). Increment the span_tracker.\n   *        7. Diff: set span_value from span_tracker. Partial reset and continue.\n   */\n  setRowSpans () {\n    var leaves = []\n    var tiers = []\n    var span_tracker = {}\n\n    // 1)\n    leaves = this.data\n\n    // 2)\n    tiers = this.dimensions.filter(d => !d.hide)\n    tiers.forEach(tier => {\n      span_tracker[tier.name] = 1\n    })\n\n    // Loop backwards through leaves\n    for (var l = leaves.length - 1; l >= 0 ; l--) {\n      var leaf = leaves[l]\n\n      // Totals/subtotals rows: full reset and continue\n      if (leaf.type !== 'line_item' ) {\n        tiers.forEach(tier => {\n          span_tracker[tier.name] = 1\n        })\n        continue;\n      }\n\n      // Loop fowards through the tiers\n      for (var t = 0; t < tiers.length; t++) {\n        var tier = tiers[t]\n        var this_tier_value = leaf.data[tier.name].value\n        var neighbour_value = l > 0 ? leaves[l - 1].data[tier.name].value : null\n\n        // Match: mark invisible (span_value = -1). Increment the span_tracker.\n        if (l > 0 && this_tier_value === neighbour_value) {\n          leaf.data[tier.name].rowspan = -1\n          leaf.data[tier.name].colspan = -1\n          span_tracker[tier.name] += 1\n        } else {\n        // Different: set span_value from span_tracker. Partial reset and continue\n          for (var t_ = t; t_ < tiers.length; t_++) {\n            var tier_ = tiers[t_]\n            leaf.data[tier_.name].rowspan = span_tracker[tier_.name]\n            if (leaf.data[tier_.name].rowspan > 1) {\n              leaf.data[tier_.name].cell_style.push('merged')\n            }\n            span_tracker[tier_.name] = 1\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Generates subtotals values\n   * \n   * 1. Build array of subtotal groups\n   *    - Based on the joined values of each row's dimensions (up to the configured subtotal depth)\n   *    - Update each row's sort value with its subtotal group number\n   * 2. Generate data rows\n   *    - For each subtotal group, create a new Row\n   *      - For each Column\n   *        - Set the style\n   *        - In the index dimension and the firstVisibleDimension, put the subtotal label\n   *        - If it's a measure \n   *          - Count & total all rows of type 'line_item'\n   *          - Use total or average value based on calculation type\n   *          - Set as blank if it's a string type\n   *            // This is a gap in functionality. Ideally subtotal would replicate the logic that generated\n   *            // the string values in the line items.\n   */\n  addSubTotals () { \n    var depth = this.addSubtotalDepth\n\n    // BUILD GROUPINGS / SORT VALUES\n    var subTotalGroups = []\n    var latest_group = []\n    this.data.forEach((row, i) => {    \n      if (row.type !== 'total') {\n        var group = []\n        for (var g = 0; g < depth; g++) {\n          var dim = this.dimensions[g].name\n          group.push(row.data[dim].value)\n        }\n        if (group.join('|') !== latest_group.join('|')) {\n          subTotalGroups.push(group)\n          latest_group = group\n        }\n        row.sort = [0, subTotalGroups.length-1, i]\n      }\n      \n      if (row.id === 'Others' && row.type === 'line_item') {\n        row.hide = true\n      }\n    })\n\n    // GENERATE DATA ROWS FOR SUBTOTALS\n    subTotalGroups.forEach((subTotalGroup, s) => {\n      var subtotalRow = new Row('subtotal')\n      var dims = subTotalGroup.join('|') ? subTotalGroup.join('|') : 'Others'\n      subtotalRow.id = ['Subtotal', dims].join('|')\n\n      this.columns.forEach(column => {\n        if (column.modelField.type === 'dimension') {\n          if ([this.firstVisibleDimension, '$$$_index_$$$'].includes(column.id)) {\n            var rowspan = 1\n            var colspan = this.useIndexColumn ? 1 : this.dimensions.filter(d => !d.hide).length\n          } else {\n            var rowspan = -1\n            var colspan = -1\n          }\n          var cell_style = column.modelField.is_numeric ? ['total', 'subtotal', 'numeric', 'dimension'] : ['total', 'subtotal', 'nonNumeric', 'dimension']\n          var cell = new DataCell({ \n            'cell_style': cell_style, \n            align: column.modelField.is_numeric ? 'right' : 'left', \n            rowspan: rowspan, \n            colspan: colspan,\n            colid: column.id,\n            rowid: subtotalRow.id\n          })\n          if (column.id === '$$$_index_$$$' || column.id === this.firstVisibleDimension ) {\n            if (this.genericLabelForSubtotals) {\n              cell.value = 'Subtotal'\n              cell.rendered = 'Subtotal'\n            } else {\n              cell.value = subTotalGroup.join(' | ') ? subTotalGroup.join(' | ') : 'Others'\n              cell.rendered = cell.value\n            }\n          }\n          subtotalRow.data[column.id] = cell\n        }\n\n        if (column.modelField.type == 'measure') {\n          var cell_style = column.modelField.is_numeric ? ['total', 'subtotal', 'numeric', 'measure'] : ['total', 'subtotal', 'nonNumeric', 'measure']\n          var align = column.modelField.is_numeric ? 'right' : 'left'\n          if (Object.entries(this.subtotals_data).length > 0 && !subtotalRow.id.startsWith('Subtotal|Others')) { // if subtotals already provided in Looker's queryResponse\n            var cell = new DataCell({ \n              ...subtotalRow.data[column.id], \n              ...this.subtotals_data[subtotalRow.id].data[column.id],\n              ...{ cell_style: cell_style, align: align, colid: column.id, rowid: subtotalRow.id }\n            })\n            subtotalRow.data[column.id] = cell\n          } else {\n            var subtotal_value = 0\n            var subtotal_items = 0\n            var rendered = ''\n            this.data.forEach(data_row => {\n              if (data_row.type == 'line_item' && data_row.sort[1] == s) { // data_row.sort[1] == s checks whether its part of the current subtotal group\n                var value = data_row.data[column.id].value\n                if (Number.isFinite(value)) {\n                  subtotal_value += value\n                  subtotal_items++\n                }\n              } \n            })\n            \n            if (column.modelField.calculation_type === 'average' && subtotal_items > 0) {\n              subtotal_value = subtotal_value / subtotal_items\n            }\n            if (subtotal_value) {\n              var unit = this.config.useUnit && column.modelField.unit !== '#'  ? column.modelField.unit : ''\n              rendered = column.modelField.value_format === '' ? subtotal_value.toString() : unit + SSF.format(column.modelField.value_format, subtotal_value)\n            }\n            if (column.modelField.calculation_type === 'string') {\n              subtotal_value = ''\n              rendered = ''\n            } \n\n            var cell = new DataCell({\n              value: subtotal_value,\n              rendered: rendered,\n              cell_style: cell_style,\n              align: align,\n              colid: column.id,\n              rowid: subtotalRow.id\n            })\n            subtotalRow.data[column.id] = cell\n          }\n        }\n      })\n      subtotalRow.sort = [0, s, 9999]\n      this.data.push(subtotalRow)\n    })\n    this.sortData()\n    this.hasSubtotals = true\n  }\n\n  /**\n   * Generates new column subtotals, where 2 pivot levels have been used\n   * // TODO: Could also have subtotals for 1 pivot tables sorted by measure\n   * \n   * 1. Derive the new column definitions\n   * 2. Use the new definitions to add subtotal columns to table.columns\n   * 3. Calculate the column subtotal values\n   */\n  addColumnSubTotals () {\n    var subtotalColumns = []\n\n    // Get a list of unique top-level pivot values in the pivot_values object\n    var pivots = []\n    var pivot_dimension = this.pivot_fields[0].name\n    this.pivot_values.forEach(pivot_value => {\n      var p_value = pivot_value['data'][pivot_dimension]\n      if (p_value !== null) { pivots.push(p_value) }\n    })\n    pivots = [...new Set(pivots)]\n\n\n    // DERIVE THE NEW COLUMN DEFINITIONS\n    pivots.forEach(pivot => {\n      this.measures.forEach((measure, m) => {\n        if (measure.can_pivot) {\n          var subtotalColumn = new Column(['$$$_subtotal_$$$', pivot, measure.name].join('.'), this, measure)\n          subtotalColumn.pivoted = true\n          subtotalColumn.subtotal = true\n          subtotalColumn.pivot_key = [pivot, '$$$_subtotal_$$$'].join('|')\n          subtotalColumn.subtotal_data = {\n            pivot: pivot,\n            measure_idx: m,\n            columns: [],\n          }\n  \n          this.columns.forEach((column, i) => {  \n            var columnPivotValue = null\n            for (var i = 0; i < column.levels.length; i++) {\n              if (column.levels[i].type.startsWith('pivot')) {\n                columnPivotValue = column.levels[i].modelField.label\n                break\n              }\n            }\n\n            if (column.pivoted && columnPivotValue === pivot) {\n              if (column.modelField.name === measure.name) {\n                subtotalColumn.subtotal_data.columns.push(column)\n              }\n            }\n          })\n          subtotalColumns.push(subtotalColumn)\n        }\n      })\n    })\n\n    // USE THE NEW DEFINITIONS TO ADD SUBTOTAL COLUMNS TO TABLE.COLUMNS\n    subtotalColumns.forEach((subtotalColumn, s) => {\n      subtotalColumn.sort.push(1)\n\n      this.headers.forEach((header, i) => {\n        switch (header.type) {\n          case 'pivot0':\n            var sort_value_from_column = subtotalColumn.subtotal_data.columns[0].levels[i].pivotData.sort_values[header.modelField.name]\n            subtotalColumn.levels.push(new HeaderCell({ \n              column: subtotalColumn, \n              type: header.type, \n              modelField: {\n                name: this.pivot_fields[0].name,\n                label: subtotalColumn.subtotal_data.pivot,\n              }\n            }))\n            subtotalColumn.sort.push(sort_value_from_column)\n            break\n\n          case 'pivot1':\n            subtotalColumn.levels.push(new HeaderCell({ column: subtotalColumn, type: header.type, modelField: {\n              name: 'subtotal',\n              label: 'Subtotal',\n            }}))\n            var subtotalSortValue = typeof this.pivot_values[0].sort_values[header.modelField.name] === 'string' ? 'ZZZZ' : 99999999\n            subtotalColumn.sort.push(subtotalSortValue)\n            break\n\n          case 'heading':\n            subtotalColumn.levels.push(new HeaderCell({ column: subtotalColumn, type: 'heading', modelField: subtotalColumn.modelField}))\n            break\n\n          case 'field':\n            subtotalColumn.levels.push(new HeaderCell({ column: subtotalColumn, type: 'field', modelField: subtotalColumn.modelField}))\n            subtotalColumn.sort.push(subtotalColumn.subtotal_data.measure_idx)\n            break\n        }\n      })\n      this.columns.push(subtotalColumn)\n    })\n\n    // CALCULATE COLUMN SUB TOTAL VALUES\n    this.data.forEach(row => {\n      subtotalColumns.forEach(subtotalColumn => {\n        var cell_style = subtotalColumn.modelField.is_numeric ? ['subtotal', 'numeric', 'measure'] : ['subtotal', 'nonNumeric', 'measure']\n        var subtotal_value = 0\n        subtotalColumn.subtotal_data.columns.forEach(column => { // subtotalColumn.columns i.e. the individual columns that are aggregated into a single subtotal columns\n          subtotal_value += row.data[column.id].value\n        })\n        row.data[subtotalColumn.id] = new DataCell({\n          value: subtotal_value,\n          rendered: subtotalColumn.modelField.value_format === '' ? subtotal_value.toString() : SSF.format(subtotalColumn.modelField.value_format, subtotal_value),\n          cell_style: cell_style,\n          colid: subtotalColumn.id,\n          rowid: row.id\n        })\n        if (['subtotal', 'total'].includes(row.type)) { \n          row.data[subtotalColumn.id].cell_style.push('total') \n        }\n      })\n    })\n\n    // return subtotals\n  }\n\n  /**\n   * Variance calculation function to enable addVariance()\n   * @param {*} value_format \n   * @param {*} id \n   * @param {*} calc \n   * @param {*} baseline \n   * @param {*} comparison \n   */\n  calculateVariance (value_format, id, calc, baseline, comparison) {\n    this.data.forEach(row => {\n      var baseline_value = row.data[baseline.id].value\n      var comparison_value = row.data[comparison.id].value\n      if (calc === 'absolute') {\n        var cell = new DataCell({\n          value: baseline_value - comparison_value,\n          rendered: value_format === '' ? (baseline_value - comparison_value).toString() : SSF.format(value_format, (baseline_value - comparison_value)),\n          cell_style: ['numeric', 'measure', 'variance', 'varianceAbsolute'],\n          colid: id,\n          rowid: row.id\n        })\n      } else {\n        var value = (baseline_value - comparison_value) / Math.abs(comparison_value)\n        if (!isFinite(value)) {\n          var cell = new DataCell({\n            value: null,\n            rendered: '∞',\n            cell_style: ['numeric', 'measure', 'variance', 'variancePercent'],\n            colid: id,\n            rowid: row.id\n          })\n        } else {\n          var cell = new DataCell({\n            value: value,\n            rendered: SSF.format('#0.00%', value),\n            cell_style: ['numeric', 'measure', 'variance', 'variancePercent'],\n            colid: id,\n            rowid: row.id\n          })\n        }\n      }\n      if (row.type == 'total' || row.type == 'subtotal') {\n        cell.cell_style.push('total')\n      }\n      if (row.type === 'subtotal') {\n        cell.cell_style.push('subtotal')\n      }\n      if (cell.value < 0) {\n        cell.cell_style.push('negative')\n      }\n      row.data[id] = cell\n    })\n  }\n\n  createVarianceColumn (colpair) {\n    if (!this.config.colSubtotals && colpair.variance.baseline.startsWith('$$$_subtotal_$$$')) {\n      console.log('Cannot calculate variance of column subtotals if subtotals disabled.')\n      return\n    }\n    var id = ['$$$_variance_$$$', colpair.calc, colpair.variance.baseline, colpair.variance.comparison].join('|')\n    var baseline = this.getColumnById(colpair.variance.baseline)\n    var comparison = this.getColumnById(colpair.variance.comparison)\n    var column = new Column(id, this, baseline.modelField)\n    column.isVariance = true\n\n    if (colpair.calc === 'absolute') {\n      column.variance_type = 'absolute'\n      column.idx = baseline.idx + 1\n      column.pos = baseline.pos + 1\n      column.sort = [...baseline.sort, 1]\n      column.hide = !this.config['var_num|' + baseline.modelField.name]\n    } else {\n      column.variance_type = 'percentage'\n      column.idx = baseline.idx + 2\n      column.pos = baseline.pos + 2\n      column.sort = [...baseline.sort, 2]\n      column.unit = '%'\n      column.hide = !this.config['var_pct|' + baseline.modelField.name]\n    }\n\n    if (typeof this.config.columnOrder[column.id] !== 'undefined') {\n      column.pos = this.config.columnOrder[column.id]\n    } \n\n    column.pivoted = baseline.pivoted\n    column.super = baseline.super\n    column.pivot_key = baseline.pivot_key\n\n    if (this.groupVarianceColumns) {    \n        column.sort[0] = 1.5\n    }\n\n    this.headers.forEach((header, i) => {\n      switch (header.type) {\n        case 'pivot0':\n        case 'pivot1':\n          var label = baseline.getHeaderCellLabelByType(header.type)\n          if (this.groupVarianceColumns && header.type === 'pivot0') {\n            var label = this.pivot_values.length === 2 ? 'Variance' : 'Variance: ' + label\n          }\n          var headerCell = new HeaderCell({ column: column, type: header.type, modelField: { label: label } })\n          column.levels[i] = headerCell\n          break\n        case 'heading':\n          var headerCell = new HeaderCell({ column: column, type: 'heading', modelField: baseline.modelField })\n          column.levels[i] = headerCell\n          break\n        case 'field':\n          var headerCell = new HeaderCell({ column: column, type: 'field', modelField: baseline.modelField })\n          column.levels[i] = headerCell\n          break;\n      }\n    })\n\n    this.columns.push(column)\n    if (colpair.variance.reverse) {\n      this.calculateVariance(baseline.modelField.value_format, id, colpair.calc, comparison, baseline)\n    } else {\n      this.calculateVariance(baseline.modelField.value_format, id, colpair.calc, baseline, comparison)\n    }\n  }\n\n  /**\n   * Function to add variance columns directly within table vis rather than requiring a table calc\n   * \n   * Takes list of variances configured by the user, and generates a list of column-pairs necessary\n   * to calculate those variances. There is at least one baseline-comparison pair per variance.\n   * Comparing different measures in a pivoted table will calculate a variance pair per pivot value.\n   * Comparing the same measure across pivots will calculate one pair less than there are pivots e.g.\n   * if comparing this year to last year, there are two \"Reporting Period\" values but only one variance.\n   */\n  addVarianceColumns () {\n    var variance_colpairs = []\n    var calcs = ['absolute', 'percent']\n    \n    Object.keys(this.variances).forEach(v => {\n      var variance = this.variances[v]\n\n      if (variance.comparison !== 'no_variance') {          \n        if (variance.type === 'vs_measure') {\n          if (!this.hasPivots) {\n            calcs.forEach(calc => {\n              variance_colpairs.push({\n                variance: variance,\n                calc: calc\n              })\n            })\n          } else {\n            this.pivot_values.forEach(pivot_value => {\n              if (!pivot_value.is_total) {\n                calcs.forEach(calc => {\n                  variance_colpairs.push({\n                    calc: calc,\n                    variance: {\n                      baseline: [pivot_value.key, variance.baseline].join('.'),\n                      comparison: [pivot_value.key, variance.comparison].join('.'),\n                      reverse: variance.reverse,\n                      type: variance.type\n                    }\n                  })\n                })\n              }\n            })\n          }\n        } else if (variance.type === 'by_pivot') { \n          if (this.pivot_fields.length === 1 || this.pivot_fields[1].name === variance.comparison) {\n            var pivot_values = this.varianceForLastPivotColumnOnly ? this.pivot_values.slice(1).slice(-1) : this.pivot_values.slice(1)\n            var comparisons = this.varianceForLastPivotColumnOnly ? this.pivot_values.slice(-2,-1) : this.pivot_values\n            pivot_values.forEach((pivot_value, index) => {\n              calcs.forEach(calc => {\n                if (!pivot_value.is_total) {\n                  variance_colpairs.push({\n                    calc: calc,\n                    variance: {\n                      baseline: [pivot_value.key, variance.baseline].join('.'),\n                      comparison: [comparisons[index].key, variance.baseline].join('.'),\n                      reverse: variance.reverse,\n                      type: variance.type\n                    }\n                  })\n                }\n              })\n            })\n          } else { // top pivot value - variance by subtotal\n            var top_level_pivots = []\n            this.pivot_values.forEach(pivot_value => {\n              if (!pivot_value.is_total) {\n                var value = pivot_value.data[this.pivot_fields[0].name]\n                if (!top_level_pivots.includes(value)) {\n                  top_level_pivots.push(value)\n                }\n              }\n            })\n            top_level_pivots.slice(1).forEach((pivot_value, index) => {\n              calcs.forEach(calc => {\n                variance_colpairs.push({\n                  calc: calc,\n                  variance: {\n                    baseline: ['$$$_subtotal_$$$', pivot_value, variance.baseline].join('.'),\n                    comparison: ['$$$_subtotal_$$$', top_level_pivots[index], variance.baseline].join('.'),\n                    reverse: variance.reverse,\n                    type: variance.type\n                  }\n                })\n              })\n            })\n          } \n        }\n      }\n    })\n\n    variance_colpairs.forEach(colpair => {\n        this.createVarianceColumn(colpair)\n      })\n\n  }\n\n  compareSortArrays (a, b) {\n    var depth = Math.max(a.sort.length, b.sort.length)\n    for(var i = 0; i < depth; i++) {\n        var a_value = typeof a.sort[i] !== 'undefined' ? a.sort[i] : 0\n        var b_value = typeof b.sort[i] !== 'undefined' ? b.sort[i] : 0\n        if (a_value > b_value) { return 1 }\n        if (a_value < b_value) { return -1 }\n    }\n    return -1\n  }\n  /**\n   * Sorts the rows of data, then updates vertical cell merge \n   * \n   * Rows are sorted by three values:\n   * 1. Section\n   * 2. Subtotal Group\n   * 3. Row Value (currently based only on original row index from the Looker data object)\n   */\n  sortData () {\n    this.data.sort(this.compareSortArrays)\n    if (this.spanRows) { this.setRowSpans() }\n  }\n\n  /**\n   * Sorts columns by config option\n   * \n   * Depending on the colsSortBy option, columns are sorted by either:\n   * \n   * Sort by Pivots (default)\n   * 1. Section: Index, Dimensions, Measures, or Supermeasures\n   * 2. Pivot sort values\n   * 3. Original column number for the Looker data obect [last item in sort value array]\n   * \n   * Sort by Measures\n   * 1. Section: Index, Dimensions, Measures, or Supermeasures\n   * 2. Original Column Number\n   * 3. Measure sort values [remainder of sort value array]\n   * \n   * Note that column sort values can be over-riden by manual drag'n'drop \n   */\n  sortColumns () {\n    this.columns.sort(this.compareSortArrays)\n  }\n\n  /**\n   * 1. Build list of leaves\n   * 2. Build list of tiers (and initialise span_tracker)\n   * 3. Backwards <--- leaves\n   *    4. Check for resets (n/a for colspans)\n   *    5. Forwards ---> tiers\n   *        6. Match: mark invisible (span_value = -1). Increment the span_tracker.\n   *        7. Diff: set span_value from span_tracker. Partial reset and continue.\n   */\n  setColSpans () {\n    var leaves = []\n    var tiers = []\n    var span_tracker = {}\n    \n    // 1)\n    var columns = this.columns.filter(c => !c.hide)\n\n    columns.forEach(column => {\n      var leaf = {\n        id: column.id,\n        data: column.getHeaderData()\n      }\n      leaves.push(leaf)\n    })\n\n    // 2)\n    tiers = this.headers\n    tiers.forEach(tier => {\n      span_tracker[tier.type] = 1\n    })\n\n    // 3)\n    for (var l = leaves.length - 1; l >= 0; l--) {\n      var leaf = leaves[l]\n\n      // 5)\n      for (var t = 0; t < tiers.length; t++) {\n        var tier = tiers[t]\n        var this_tier_value = leaf.data[tier.type].label\n        var neighbour_value = l > 0 ? leaves[l - 1].data[tier.type].label : null\n\n        // 6) \n        if (l > 0 && this_tier_value === neighbour_value) {\n          leaf.data[tier.type].colspan = -1\n          leaf.data[tier.type].rowspan = -1\n          span_tracker[tier.type] += 1;\n        } else {\n        // 7) \n          for (var t_ = t; t_ < tiers.length; t_++) {\n            var tier_ = tiers[t_]\n            leaf.data[tier_.type].colspan = span_tracker[tier_.type]\n            if (leaf.data[tier_.type].colspan > 1) {\n              leaf.data[tier_.type].align = 'center'\n              leaf.data[tier_.type].cell_style.push('merged')\n            }\n            span_tracker[tier_.type] = 1\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Applies conditional formatting (red if negative) to all measure columns set to use it \n   */\n  applyFormatting() {\n    this.columns.forEach(column => {\n      var config_setting = this.config['style|' + column.modelField.name]\n      if (typeof config_setting !== 'undefined') {\n        switch (config_setting) {\n          case 'black_red':\n            this.data.forEach(row => {\n              if (row.data[column.id].value < 0) {\n                row.data[column.id].cell_style.push('negative')\n              }\n            })\n            break\n        }\n      }\n    })\n  }\n\n  transposeDimensionsIntoHeaders () {\n    this.transposed_headers = this.columns\n      .filter(c => c.modelField.type === 'dimension')\n      .filter(c => !c.hide)\n      .map(c => { return { type: 'field', modelField: c.modelField } })\n  }\n\n  /**\n   * For rendering a transposed table i.e. with the list of measures on the left hand side\n   * 1. Add an index column per header\n   * 2. Add a transposed column for every data row\n   */\n  transposeRowsIntoColumns () {\n    // TODO: review logic for cell.align\n    var index_parent = {\n      align: 'left',\n      type: 'transposed_table_index',\n      is_table_calculation: false\n    }\n\n    // One \"index column\" per header row from original table\n    this.headers.forEach((indexColumn, i) => {\n      var transposedColumn = new Column(indexColumn.type, this, index_parent)\n\n      this.transposed_headers.forEach((header, h) => {\n        var sourceCell = this.columns[h].levels[i]\n        var headerCell = new HeaderCell({\n          column: transposedColumn,\n          type: sourceCell.type,\n          label: sourceCell.label,\n          cell_style: sourceCell.cell_style,\n          align: sourceCell.align,\n          modelField: sourceCell.modelField\n        })\n        headerCell.rowspan = sourceCell.colspan\n        headerCell.colspan = sourceCell.rowspan\n        headerCell.id = [sourceCell.modelField.name, sourceCell.type].join('.')\n        headerCell.cell_style.push('transposed')\n\n        if (headerCell.colspan > 0) {\n          headerCell.cell_style.push('merged')\n        }\n\n        transposedColumn.levels.push(headerCell)\n      })\n\n      this.transposed_columns.push(transposedColumn)\n    })\n    \n    var measure_parent = {\n      align: 'right',\n      type: 'transposed_table_measure',\n      is_table_calculation: false\n    }\n  \n    // One column per data row (line items, subtotals, totals)\n    this.data.forEach(sourceRow => {\n      var transposedColumn = new Column(sourceRow.id, this, measure_parent)\n\n      this.transposed_headers.forEach(header => {\n        var cellRef = this.useIndexColumn && ['subtotal', 'total'].includes(sourceRow.type) ? '$$$_index_$$$' : header.modelField.name\n        var sourceCell = sourceRow.data[cellRef]\n        var headerCell = new HeaderCell({ \n          column: transposedColumn, \n          type: header.type, \n          label: sourceCell.rendered === '' ? sourceCell.rendered : sourceCell.rendered || sourceCell.value, \n          align: 'center',\n          cell_style: sourceCell.cell_style,\n        })\n        headerCell.colspan = sourceCell.rowspan\n        headerCell.rowspan = sourceCell.colspan\n        headerCell.id = [sourceCell.colid, sourceCell.rowid].join('.')\n        headerCell.cell_style.push('transposed')\n\n        transposedColumn.levels.push(headerCell)\n      })\n\n      this.transposed_columns.push(transposedColumn)\n    })\n  }\n\n  transposeColumnsIntoRows () { \n    console.log('transposeColumnsIntoRows()...')\n    this.columns.filter(c => c.modelField.type === 'measure').forEach(column => {\n      var transposedData = {}\n\n      // INDEX FIELDS // every index/dimension column in original table must be represented as a data cell in the new transposed rows\n      column.levels.forEach((level, i) => {        \n        var cell = new DataCell({\n          value: level.label,\n          rendered: level.label,\n          rowspan: level.colspan,\n          colspan: level.rowspan,\n          cell_style: ['indexCell', 'transposed'],\n          align: 'left',\n          colid: column.id,\n          rowid: level.type\n        })\n\n        switch (level.type) {\n          case 'pivot0':\n          case 'pivot1':\n            cell.cell_style.push('pivot')\n            break\n          case 'heading':\n          case 'field':\n            var style = column.modelField.is_table_calculation ? 'calculation' : 'measure'\n            cell.cell_style.push(style)\n            break\n        }\n\n        if (cell.rowspan > 1) {\n          cell.cell_style.push('merged')\n        }\n\n        transposedData[level.type] = cell\n      })\n\n      // MEASURE FIELDS // every measure column in original table is converted to a data row\n      this.data.forEach(row => {\n        if (typeof row.data[column.id] !== 'undefined') {\n          var sourceCell = row.data[column.id]\n          transposedData[row.id] = row.data[column.id]\n          transposedData[row.id].id = [sourceCell.colid, sourceCell.rowid].join('.')\n          transposedData[row.id]['cell_style'].push('transposed')\n        } else {\n          console.log('row data does not exist for', column.id)\n        }\n      })\n\n      var transposed_row = new Row('line_item')\n      transposed_row.id = column.id\n      transposed_row.modelField = column.modelField\n      transposed_row.hide = column.hide\n      transposed_row.data = transposedData\n\n      this.transposed_data.push(transposed_row)\n\n    })\n  }\n\n  validateConfig() {\n    if (!['traditional', 'looker', 'contemporary', 'custom'].includes(this.config.theme)) {\n      this.config.theme = 'traditional'\n    }\n\n    if (!['fixed', 'auto'].includes(this.config.layout)) {\n      this.config.layout = 'fixed'\n    }\n\n    if (typeof this.config.transposeTable === 'undefined') {\n      this.config.transposeTable = false\n    }\n\n    Object.entries(this.config).forEach(option => {\n      if (option[1] === 'false') {\n        option[1] = false\n      } else if (option[1] === 'true') {\n        option[1] = true\n      }\n\n      if (option[0].split('|').length === 2) {\n        var [field_option, field_name] = option[0].split('|')\n        if (['label', 'heading', 'hide', 'style', 'switch', 'var_num', 'var_pct', 'comparison'].includes(field_option)) {\n          var keep_option = false\n          this.dimensions.forEach(dimension => {\n            if (dimension.name === field_name) { keep_option = true }\n          })\n          this.measures.forEach(measure => {\n            if (measure.name === field_name) { keep_option = true }\n          })\n          if (!keep_option) {\n            delete this.config[option[0]]\n          } \n        }\n      }\n    })\n  }\n\n  /**\n   * Returns column that matches ID provided\n   * @param {*} id \n   */\n  getColumnById (id) {\n    var column = {}\n    this.columns.forEach(c => {\n      if (id === c.id) { \n        column = c \n      }\n    })\n    return column\n  }\n\n  /**\n   * Returns row that matches ID provided\n   * @param {*} id \n   */\n  getRowById (id) {\n    var row = {}\n    this.data.forEach(r => {\n      if (id === r.id) {\n        row = r\n      }\n    })\n    return row\n  }\n\n  getMeasureByName (name) {\n    var measure = ''\n    this.measures.forEach(m => {\n      if (name === m.name) { \n        measure = m\n      }\n    })\n    return measure\n  }\n\n\n  /**\n   * Extracts the formatted value of the field from the html: value\n   * There are cases (totals data) where the formatted value isn't available as usual rendered_value\n   * @param {*} cellValue \n   */\n  getRenderedFromHtml (cellValue) {\n    var parser = new DOMParser()\n    if (typeof cellValue.html !== 'undefined' && !['undefined', ''].includes(cellValue.html)) {\n      try {\n        var parsed_html = parser.parseFromString(cellValue.html, 'text/html')\n        var rendered = parsed_html.documentElement.textContent\n      }\n      catch(TypeError) {\n        var rendered = cellValue.html\n      }\n    } else {\n      var rendered = cellValue.value\n    }\n\n    return rendered\n  }\n\n  /**\n   * Used to support rendering of table as vis. \n   * Returns an array of 0s, of length to match the required number of header rows\n   */\n  getHeaderTiers () {    \n    if (!this.transposeTable) {\n      return this.headers\n    } else {\n      return this.transposed_headers\n    }\n  }\n\n  /**\n   * Used to support rendering of data table as vis. \n   * Builds list of columns out of data set that should be displayed\n   * @param {*} i \n   */\n  getTableHeaderCells (i) {\n    if (!this.transposeTable) {\n      return this.columns\n        .filter(c => !c.hide)\n        .filter(c => c.levels[i].colspan > 0)\n    } else {\n      return this.transposed_columns\n        .filter(c => c.levels[i].colspan > 0)\n    }\n  }\n\n  getDataRows () {\n    if (!this.transposeTable) {\n      var dataRows = this.data.filter(row => !row.hide)\n    } else {\n      var dataRows = this.transposed_data.filter(row => !row.hide)\n    }\n    return dataRows\n  }\n\n  /**\n   * Used to support rendering of data table as vis.\n   * For a given row of data, returns filtered array of cells – only those cells that are to be displayed.\n   * @param {*} row \n   */\n  getTableRowColumns (row) {\n    if (!this.transposeTable) {\n      var cells = this.columns\n        .filter(column => !column.hide)\n        .filter(column => row.data[column.id].rowspan > 0)\n    } else {\n      var cells = this.transposed_columns\n      .filter(column => !column.hide)\n      .filter(column => row.data[column.id].rowspan > 0)\n    }\n    return cells    \n  }\n\n  /**\n   * Used to support column drag'n'drop when rendering data table as vis.\n   * Updates the table.config with the new pos values.\n   * Accepts a callback function for interaction with the vis.\n   * @param {*} from \n   * @param {*} to \n   * @param {*} callback \n   */\n  moveColumns(from, to, updateColumnOrder) {\n    var config = this.config\n    if (from != to) {\n      var shift = to - from\n      var col_order = config.columnOrder\n      this.columns.forEach(col => {\n        if (col.modelField.type == 'measure' && !col.super) {\n          if (col.pos >= from && col.pos < from + 10) {\n            // console.log('MOVING COLUMN', col.id, col.pos, '->', col.pos + shift)\n            col.pos += shift\n          } else if (col.pos >= to && col.pos < from) {\n            // console.log('NUDGING COLUMN', col.id, col.pos, '->', col.pos + 10)\n            col.pos += 10\n          } else if (col.pos >= from + 10 && col.pos < to + 10) {\n            // console.log('NUDGING COLUMN', col.id, col.pos, '->', col.pos - 10)\n            col.pos -= 10\n          }\n          col_order[col.id] = col.pos\n        } \n      })\n      updateColumnOrder(col_order)\n    }\n  }\n\n  /**\n   * Returns dataset as a simple json object\n   * Includes line_items only (e.g. no row subtotals)\n   * \n   * Convenience function when using LookerData as an object to support e.g. Vega Lite visualisations\n   */\n  getSimpleJson() {\n    var raw_values = []\n    this.data.forEach(r => {\n      if (r.type === 'line_item') {\n        var row = {}\n        this.columns.forEach(c => {\n          row[c.id] = r.data[c.id].value\n        })\n        raw_values.push(row)\n      }\n    })\n    return raw_values\n  }\n\n\n  /**\n   * Builds array of arrays, used at by table vis to build column groups\n   * Three column groups: \n   * - index (dimensions)\n   * - measures (standard measures)\n   * - totals (supermeasures: row totals and some table calcs)\n   * \n   * For transposed tables:\n   * - index (headers, pivot value, measures)\n   * - measures (Includes subtotals. Cells contain measure values, header rows contain dimension values)\n   * - totals (totals)\n   */\n  getTableColumnGroups () {\n    var indexColumns = []\n    var measureColumns = []\n    var totalColumns = []\n\n    if (!this.transposeTable) {\n      this.columns.forEach(column => {\n        if (column.modelField.type === 'dimension' && !column.hide) {\n          indexColumns.push({ id: column.id, type: 'index' })\n        } else if (column.modelField.type === 'measure' && !column.isRowTotal && !column.super && !column.hide) {\n          measureColumns.push({ id: column.id, type: 'dataCell' })\n        } else if (column.modelField.type === 'measure' && (column.isRowTotal || column.super) && !column.hide) {\n          totalColumns.push({ id: column.id, type: 'dataCell' })\n        }\n      })\n    } else {\n      this.transposed_columns.forEach(column => {\n        if (column.modelField.type === 'transposed_table_index') {\n          indexColumns.push({ id: column.id, type: 'index' })\n        } else if (column.modelField.type === 'transposed_table_measure' && column.id !== 'Total') {\n          measureColumns.push({ id: column.id, type: 'dataCell' })\n        } else if (column.modelField.type === 'transposed_table_measure' && column.id === 'Total') {\n          totalColumns.push({ id: column.id, type: 'dataCell' })\n        }\n      })\n    }\n\n    var columnGroups = []\n    if (indexColumns.length > 0) {\n      columnGroups.push(indexColumns)\n    }\n    if (measureColumns.length > 0) {\n      columnGroups.push(measureColumns)\n    }\n    if (totalColumns.length > 0) {\n      columnGroups.push(totalColumns)\n    }\n\n    return columnGroups\n  }\n\n  getCellToolTip (rowid, colid) {\n    var tipHTML = '<table><tbody>'\n\n    var row = this.getRowById(rowid)\n    var focusColumn = this.getColumnById(colid) \n    var field = focusColumn.modelField \n\n    if (row.type === 'total') {\n      var label = 'TOTAL'\n      var value = ''\n      var rowClass = 'focus'\n      tipHTML += ['<tr class=\"', rowClass, '\"><td><span style=\"float:left\"><em>', label, ':</em></td><td></span><span style=\"float:left\"> ', value, '</span></td></tr>'].join('')\n    } else if (row.id.startsWith('Others')) {\n      var label = 'Others'\n      var value = ''\n      var rowClass = 'focus'\n      tipHTML += ['<tr class=\"', rowClass, '\"><td><span style=\"float:left\"><em>', label, ':</em></td><td></span><span style=\"float:left\"> ', value, '</span></td></tr>'].join('')      \n    } else if (row.type === 'subtotal') {\n      var label = 'SUBTOTAL'\n      var rowClass = 'focus'\n      var subtotalColumn = this.columns.filter(c => !c.hide).filter(c => c.modelField.type === 'dimension')[0]\n      var value = row.data[subtotalColumn.id].render || row.data[subtotalColumn.id].value\n      tipHTML += ['<tr class=\"', rowClass, '\"><td><span style=\"float:left\"><em>', label, ':</em></td><td></span><span style=\"float:left\"> ', value, '</span></td></tr>'].join('')\n    } else {\n      var dimensionColumns = this.columns\n      .filter(c => c.id !== '$$$_index_$$$')\n      .filter(c => c.modelField.type === 'dimension')\n\n      dimensionColumns.forEach(column => {\n        var label = column.getHeaderCellLabelByType('field')\n        var value = row.data[column.id].rendered || row.data[column.id].value\n        var rowClass = column.id === focusColumn.id ? 'focus' : ''\n        tipHTML += ['<tr class=\"', rowClass, '\"><td><span style=\"float:left\"><em>', label, ':</em></td><td></span><span style=\"float:left\"> ', value, '</span></td></tr>'].join('')\n      })\n    }\n  \n    tipHTML += '<tr style=\"height:10px\"></tr>' // spacer row\n\n    var isEstimate = false\n    var measureLabel = ''\n    var measureColumns = this.columns\n      .filter(c => c.modelField.type === 'measure')\n      .filter(c => c.modelField === field)\n    \n    measureColumns.forEach(column => {\n      if (!column.isVariance) {\n        measureLabel = column.getHeaderCellLabelByType('field')\n      }\n\n      if ((!column.pivoted && !column.isRowTotal) || (column.pivot_key === focusColumn.pivot_key)) {\n        var label = column.getHeaderCellLabelByType('field')\n        var rowClass = column.id === focusColumn.id ? 'focus' : ''\n        \n        var cell = row.data[column.id]\n        var value = cell.rendered || cell.value\n        if (cell.html) { \n          var parser = new DOMParser()\n          var parsed_html = parser.parseFromString(cell.html, 'text/html')\n          value = parsed_html.documentElement.textContent\n        }\n\n        if (cell.cell_style.includes('estimate')) {\n          isEstimate = true\n        }\n\n        tipHTML += ['<tr class=\"', rowClass, '\"><td><span style=\"float:left\"><em>', label, ':</em></td><td></span><span style=\"float:right\"> ', value, '</span></td></tr>'].join('')\n      }\n    })\n\n    var isReportedIn = null\n    var reportInSetting = this.config['reportIn|' + focusColumn.modelField.name]\n    var reportInLabels = {\n      1000: '000s',\n      1000000: 'Millions',\n      1000000000: 'Billions'\n    }\n    if (typeof reportInSetting !== 'undefined'  && reportInSetting !== '1') {\n      isReportedIn = measureLabel + ' reported in ' + reportInLabels[reportInSetting]\n    }\n\n    if (isReportedIn || isEstimate) {\n      tipHTML += '<tr style=\"height:10px\"></tr>' // spacer row\n    }\n\n    if (isReportedIn) {\n      tipHTML += '<tr><td colspan=2><span style=\"color:darkgrey\">' + isReportedIn + '.</span></td></tr>'\n    }\n\n    if (isEstimate) {\n      tipHTML += '<tr><td colspan=2><span style=\"color:red\">Estimated figure due to query exceeding row limit.</span></td></tr>'\n      tipHTML += '<tr><td colspan=2><span style=\"color:red\">Consider increasing the row limit or using an alternative measure.</span></td></tr>'\n    }\n\n    tipHTML += '</tbody><table>'\n\n    return tipHTML\n  }\n}\n\nexports.VisPluginTableModel = VisPluginTableModel\n"],"sourceRoot":""}