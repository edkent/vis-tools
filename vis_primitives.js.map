{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/vis_primitives.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;;AAEA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,K;;AAEA;AACA;AACA;AACA;AACA,O;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,yCAAyC;AACzC;AACA,mCAAmC;AACnC;AACA,oCAAoC;AACpC;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,eAAe,0BAA0B;AACzC,WAAW,0BAA0B;;AAErC;AACA;AACA;AACA;;AAEA;AACA,eAAe,0BAA0B;AACzC,WAAW,0BAA0B;;AAErC;AACA;AACA;AACA;;AAEA;AACA,eAAe,qCAAqC;AACpD,WAAW,0BAA0B;;AAErC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,wEAAwE,gCAAgC,gBAAgB,EAAE,IAAI,gEAAgE;AAC7M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;;AAER;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA,0BAA0B;AAC1B,0CAA0C;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,2BAA2B;AAC1C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,eAAe,iCAAiC;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,eAAe,6BAA6B;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,sIAAsI,KAAK;AAC1J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"vis_primitives.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Returns an array of given length, all populated with same value\n * Convenience function e.g. to initialise arrays of zeroes or nulls\n * @param {*} length \n * @param {*} value \n */\nconst newArray = function(length, value) {\n  var arr = []\n  for (var l = 0; l < length; l++) {\n    arr.push(value)\n  }\n  return arr\n}\n\nclass ModelField {\n  constructor({ vis, queryResponseField }) {\n    this.vis = vis\n    this.name = queryResponseField.name\n    this.view = queryResponseField.view_label || ''\n    this.label = queryResponseField.field_group_variant || queryResponseField.label_short || queryResponseField.label\n    this.is_numeric = typeof queryResponseField.is_numeric !== 'undefined' ? queryResponseField.is_numeric : false\n    this.is_array = ['list', 'number_list', 'location', 'tier'].includes(queryResponseField.type)\n    this.value_format = queryResponseField.value_format ? queryResponseField.value_format : ''\n\n    this.geo_type = ''\n    if (queryResponseField.type === 'location' || queryResponseField.map_layer) {\n      this.geo_type = queryResponseField.type === 'location' ? 'location' : queryResponseField.map_layer.name\n    } \n\n    this.hide = false\n    if (typeof this.vis.config['hide|' + this.name] !== 'undefined') {\n      if (this.vis.config['hide|' + this.name]) {\n        this.hide = true\n      } \n    }\n\n    this.style = ''\n    var style_setting = this.vis.config['style|' + this.name]\n    if (typeof style_setting !== 'undefined') {\n      if (style_setting === 'hide') {\n        this.hide = true\n      } else {\n        this.style = style_setting\n      }\n    }\n\n    this.heading = ''\n    this.short_name = ''\n    this.unit = ''\n    if (typeof queryResponseField.tags !== 'undefined') {\n      queryResponseField.tags.forEach(tag => {\n        var tags = tag.split(':')\n        if (tags[0] === 'vis-tools') {\n          switch (tags[1]) {\n            case 'heading':\n              this.heading = tags[2] ; break\n            case 'short_name':\n              this.short_name = tags[2] ; break\n            case 'unit':\n              this.unit = tags[2] ; break\n            case 'style':\n              this.style = tags[2] ; break\n          }\n        }\n      })\n    }\n  }\n}\n\nclass ModelDimension extends ModelField {\n  constructor({ vis, queryResponseField }) {\n    super({ vis, queryResponseField })\n\n    this.type = 'dimension'    \n    this.align = 'left'\n  }\n}\n\nclass ModelPivot extends ModelField {\n  constructor({ vis, queryResponseField }) {\n    super({ vis, queryResponseField })\n\n    this.type = 'pivot'    \n    this.align = 'center'\n  }\n}\n\nclass ModelMeasure extends ModelField {\n  constructor({ vis, queryResponseField, can_pivot }) {\n    super({ vis, queryResponseField })\n\n    this.type = 'measure'\n    this.align = 'right'\n\n    this.is_table_calculation = typeof queryResponseField.is_table_calculation !== 'undefined' ? queryResponseField.is_table_calculation : false\n    this.calculation_type = queryResponseField.type\n    this.is_turtle = typeof queryResponseField.is_turtle !== 'undefined' ? queryResponseField.is_turtle : false\n    this.can_pivot = can_pivot\n  }\n}\n\nclass HeaderCell {\n  constructor({ column, type, label = null, align = '', cell_style = [], modelField = { name: '', label: '', view: '' }, pivotData = {} } = { column, type, label, align, cell_style, modelField, pivotData }) {\n    this.id = [column.id, type].join('.')\n    this.column = column\n    this.type = type\n    this.colspan = 1\n    this.rowspan = 1\n    this.headerRow = true\n    this.cell_style = ['headerCell'].concat(cell_style)\n    this.label = label\n\n    this.align = align ? align : this.column.modelField.is_numeric ? 'right' : 'left'\n\n    // if (column.vis.sortColsBy === 'pivots') {\n    //   if (type.startsWith 'pivot') {\n    //     this.align = 'center'\n    //   }\n    // } else {\n\n    // }\n\n    // if (this.column.modelField.type === 'dimension') {\n    //   if (type === 'pivot') {\n    //     this.align = 'right'\n    //   } else if (type === 'heading') {\n    //     this.align = 'center'\n    //   } else {\n    //     this.align = modelField.align || 'left'\n    //   }\n    // } else if (this.column.modelField.type === 'measure') {\n    //   if (type === 'field' && (column.vis.pivot_fields.length === 0 || column.vis.sortColsBy === 'getSortByPivots' )) {\n    //     this.align = modelField.align || 'right'\n    //   } else {\n    //     this.align = 'center'\n    //   }\n    // } else {\n    //   this.align = align\n    // }\n\n    this.modelField = modelField\n    this.pivotData = pivotData\n\n    if (modelField.type) { this.cell_style.push(modelField.type)}\n    if (modelField.is_table_calculation) { this.cell_style.push('calculation')}\n  }\n}\n\n/**\n * types: dimension | line_item | subtotal | total\n */\nclass Series {\n  constructor({ keys, values, types = [] }) {\n    if (keys.length === values.length ) {\n      this.keys = keys\n      this.values = values\n      this.types = types\n\n      var line_items_only = []\n      var with_subtotals = []\n\n      this.values.forEach((value, i) => {\n        this.types[i] = typeof types[i] !== 'undefined' ? types[i] : 'line_item'\n        if (this.types[i] === 'line_item') {\n          line_items_only.push(value)\n          with_subtotals.push(value)\n        } else if (this.types[i] === 'subtotal') {\n          with_subtotals.push(value)\n        }\n      })\n\n      this.min_for_display = Math.min(...with_subtotals)\n      this.max_for_display = Math.max(...with_subtotals)\n      this.min = Math.min(...line_items_only)\n      this.max = Math.max(...line_items_only)\n      this.sum = line_items_only.reduce((a, b) => a + b, 0)\n      this.count = line_items_only.length\n      this.avg = line_items_only.length > 0 ? this.sum / line_items_only.length : null\n    } else {\n      console.log('Could not construct series, arrays were of different length.')\n    }\n  }\n}\n\nclass CellSeries {\n  constructor({ column, row, sort_value, series}) {\n    this.column = column\n    this.row = row\n    this.sort_value = sort_value\n    this.series = new Series(series)\n  }\n\n  toString() {\n    var rendered = ''\n    this.series.keys.forEach((key, i) => {\n      rendered += key + ':'\n      var formatted_value = this.column.modelField.value_format === '' \n                            ? this.series.values[i].toString() \n                            : SSF.format(this.column.modelField.value_format, this.series.values[i])\n      rendered += formatted_value + ' '\n    })\n    return rendered\n  }\n}\n\nclass ColumnSeries {\n  constructor({ column, is_numeric, series }) {\n    this.column = column\n    this.is_numeric = is_numeric\n    this.series = new Series(series)\n  }\n}\n\nclass DataCell {\n  constructor({ value, rendered = null, html = null, links = [], cell_style = [], align = 'right', rowspan = 1, colspan = 1, rowid = '', colid = '' } = {})\n    {\n      this.value = value\n      this.rendered = rendered\n      this.html = html\n      this.links = links\n      this.cell_style = ['rowCell'].concat(cell_style)\n      this.align = align\n      this.rowspan = rowspan\n      this.colspan = colspan\n\n      this.colid = colid\n      this.rowid = rowid\n      this.id = colid && rowid ? [colid, rowid].join('.') : null\n\n      if (this.value === null && this.rendered !== '∞') {\n        this.rendered = '∅'\n      }\n    }\n}\n\n/**\n * Represents a row in the dataset that populates the vis.\n * This may be an addtional row (e.g. subtotal) not in the original query\n * @class\n */\nclass Row {\n  constructor(type = 'line_item') {\n    this.id = ''\n    // this.modelField = null\n    this.hide = false\n    this.type = type  // line_item | subtotal | total\n    this.sort = []    // [ section, subtotal group, row number ]\n    this.data = {}    // Indexed by Column.id\n                      // { value: any, rendered: string, html?: string, links?: array }\n  }\n}\n\n/**\n * Represents a column in the dataset that populates the vis.\n * This may be an additional columns (e.g. subtotal, variance) not in the original query\n * \n * Ensures all key vis properties (e.g. 'label') are consistent across different field types\n * \n * @class\n */\nclass Column {\n  constructor(id, vis, modelField) {\n    this.id = id\n    this.vis = vis\n    this.modelField = modelField\n    this.transposed = false\n\n    this.idx = 0\n    this.pos = 0\n    this.levels = []\n    this.pivot_key = '' \n\n    this.unit = modelField.unit || ''\n    this.hide = modelField.hide || false\n    this.isVariance = false\n    this.variance_type = null\n    this.pivoted = false\n    this.isRowTotal = false\n    this.super = false\n    this.subtotal = false\n    this.subtotal_data = {}\n    \n    this.series = null\n\n    this.sort = []\n    this.colspans = []\n  }\n\n  /**\n   * Returns a header label for a column, to display in table vis\n   * @param {*} level\n   */\n  getHeaderCellLabel (level) {\n    var headerCell = this.levels[level]\n\n    if (headerCell.label !== null) {\n      var label = headerCell.label\n    } else {\n      var label = headerCell.modelField.label\n      var header_setting = this.vis.config['heading|' + headerCell.modelField.name]\n      var label_setting = this.vis.config['label|' + headerCell.modelField.name]\n\n      if (headerCell.type === 'heading') {\n        if (typeof header_setting !== 'undefined') {\n          label = header_setting ? header_setting : headerCell.modelField.heading\n        } else {\n          label = headerCell.modelField.heading\n        }\n        return label\n      }\n\n      if (headerCell.type === 'field') {\n        label = this.vis.useShortName\n          ? headerCell.modelField.short_name || headerCell.modelField.label \n          : headerCell.modelField.label\n        \n        if (typeof label_setting !== 'undefined' && label_setting !== this.modelField.label) {\n          label = label_setting ? label_setting : label\n        }\n\n        if (this.isVariance) {\n          if (this.vis.groupVarianceColumns) {\n            if (this.vis.pivot_values.length === 2) {\n              label = this.variance_type === 'absolute' ? label + ' #' : label + ' %'\n            } else {\n              label = this.variance_type === 'absolute' ? label + ' Var #' : label + ' Var %'\n            }\n          } else {\n            label = this.variance_type === 'absolute' ? 'Var #' : 'Var %'\n          }\n        }\n    \n        if (typeof this.vis.useViewName !== 'undefined' && this.vis.useViewName) {\n          label = [this.modelField.view, label].join(' ') \n        }\n      }\n\n      if (headerCell.type === 'pivot') {\n        if (this.isVariance && this.vis.groupVarianceColumns) {\n          if (this.vis.pivot_values.length === 2) {\n            label = 'Variance'\n          } else {\n            label = 'Var ' + label\n          }\n        }\n      }\n    }\n\n    return label\n  }\n\n  getHeaderCellLabelByType (type) {\n    for (var i = 0; i < this.vis.headers.length; i++) {\n      if (type === this.vis.headers[i].type) {\n        return this.getHeaderCellLabel(i)\n      }\n    }\n    return null\n  }\n\n  setHeaderCellLabels () {\n    this.levels.forEach((level, i) => {\n      level.label = level.label === null ? this.getHeaderCellLabel(i) : level.label\n    })\n  }\n\n  getHeaderData () {\n    var headerData = {}\n    this.modelField.vis.headers.forEach((header, i) => {\n      headerData[header.type] = this.levels[i]\n    })\n\n    return headerData\n  }\n}\n\nexports.newArray = newArray\nexports.ModelDimension = ModelDimension\nexports.ModelPivot = ModelPivot\nexports.ModelMeasure = ModelMeasure\nexports.CellSeries = CellSeries\nexports.ColumnSeries = ColumnSeries\nexports.HeaderCell = HeaderCell\nexports.DataCell = DataCell\nexports.Row = Row\nexports.Column = Column\n"],"sourceRoot":""}